{"version":3,"file":"toygl.esm.min.js","sources":["../src/defaultValue.js","../src/createContext.js","../src/defined.js","../src/glUtils.js","../src/setState.js","../src/WebglConstant.js","../src/createFramebuffer.js","../src/isPowerOfTwo.js","../src/buffer.js","../src/createVAO.js","../src/draw.js","../src/index.js","../src/getState.js","../src/clear.js","../src/isArrayLike.js","../src/createTexture.js","../src/updateTexture.js","../src/createCubeMap.js"],"sourcesContent":["function defaultValue(a, b) {\r\n  if (a === null || a === undefined) {\r\n    return b;\r\n  }\r\n  return a;\r\n}\r\n\r\ndefaultValue.EMPTY_OBJECT = Object.freeze({});\r\n\r\nexport default defaultValue;\r\n","import defaultValue from './defaultValue.js';\r\n\r\nconst global = window;\r\n\r\n/**\r\n * Create an instance of WebGLRenderingContext or WebGL2RenderingContext.\r\n * @param {Object} contextOptions \r\n * @param {Boolean} contextOptions.alpha \r\n * @param {Boolean} contextOptions.depth \r\n * @param {Boolean} contextOptions.stencil \r\n * @param {Boolean} contextOptions.antialias \r\n * @param {Boolean} contextOptions.preserveDrawingBuffer \r\n * @param {Boolean} contextOptions.premultipliedAlpha \r\n * @param {Boolean} contextOptions.requireWebgl2 \r\n * @param {HTMLCanvasElement} contextOptions.canvas \r\n * @returns \r\n */\r\nfunction createContext(contextOptions) {\r\n  contextOptions = defaultValue(contextOptions, defaultValue.EMPTY_OBJECT);\r\n\r\n  let canvas = contextOptions.canvas;\r\n  if (!canvas) {\r\n    canvas = global.document.createElement('canvas');\r\n    canvas.style.width = '100vw';\r\n    canvas.style.height = '100vh';\r\n    canvas.style.setProperty('display', 'block');\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n  }\r\n\r\n  let gl;\r\n  if (contextOptions.requireWebgl2) {\r\n    gl = canvas.getContext('webgl2', contextOptions);\r\n  } else {\r\n    gl = canvas.getContext('webgl', contextOptions);\r\n  }\r\n\r\n  // VAO extension\r\n  if (!gl.createVertexArray) {\r\n    const extVAO = gl.getExtension('OES_vertex_array_object');\r\n    if (extVAO) {\r\n      gl.createVertexArray = extVAO.createVertexArrayOES.bind(extVAO);\r\n      gl.bindVertexArray = extVAO.bindVertexArrayOES.bind(extVAO);\r\n      gl.deleteVertexArray = extVAO.deleteVertexArrayOES.bind(extVAO);\r\n      gl.isVertexArray = extVAO.isVertexArrayOES.bind(extVAO);\r\n      gl.VERTEX_ARRAY_BINDING = extVAO.VERTEX_ARRAY_BINDING_OES;\r\n    }\r\n  }\r\n\r\n  // Instanced Array extension\r\n  if (!gl.drawArraysInstanced) {\r\n    const extInstancedArrays = gl.getExtension('ANGLE_instanced_arrays');\r\n    if (extInstancedArrays) {\r\n      gl.drawArraysInstanced = extInstancedArrays.drawArraysInstancedANGLE.bind(extInstancedArrays);\r\n      gl.drawElementsInstanced = extInstancedArrays.drawElementsInstancedANGLE.bind(extInstancedArrays);\r\n      gl.vertexAttribDivisor = extInstancedArrays.vertexAttribDivisorANGLE.bind(extInstancedArrays);\r\n      gl.VERTEX_ATTRIB_ARRAY_DIVISOR = extInstancedArrays.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE;\r\n    }\r\n  }\r\n\r\n  // Draw Buffers extension\r\n  if (!gl.drawBuffers) {\r\n    const extDrawBuffers = gl.getExtension('WEBGL_draw_buffers');\r\n    if (extDrawBuffers) {\r\n      gl.drawBuffers = extDrawBuffers.drawBuffersWEBGL.bind(extDrawBuffers);\r\n      for (let i = 1; i <= 15; i++) {\r\n        gl[`COLOR_ATTACHMENT${i}`] = extDrawBuffers[`COLOR_ATTACHMENT${i}_WEBGL`];\r\n        gl[`DRAW_BUFFER${i}`] = extDrawBuffers[`DRAW_BUFFER${i}_WEBGL`];\r\n      }\r\n\r\n      gl.MAX_COLOR_ATTACHMENTS = extDrawBuffers.MAX_COLOR_ATTACHMENTS_WEBGL;\r\n      gl.MAX_DRAW_BUFFERS = extDrawBuffers.MAX_DRAW_BUFFERS_WEBGL;\r\n      gl.MAX_DRAW_BUFFERS = extDrawBuffers.MAX_DRAW_BUFFERS_WEBGL;\r\n    }\r\n  }\r\n\r\n  // Texture Anisotropic Filter\r\n  if (!gl.MAX_TEXTURE_MAX_ANISOTROPY) {\r\n    const extTextureFilterAnisotropic = gl.getExtension('EXT_texture_filter_anisotropic');\r\n    if (extTextureFilterAnisotropic) {\r\n      gl.MAX_TEXTURE_MAX_ANISOTROPY = extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT;\r\n      gl.TEXTURE_MAX_ANISOTROPY = extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT;\r\n    }\r\n  }\r\n\r\n  if (!gl.MIN) {\r\n    const extBlendMinmax = gl.getExtension('EXT_blend_minmax');\r\n    if (extBlendMinmax) {\r\n      gl.MIN = extBlendMinmax.MIN_EXT;\r\n      gl.MAX = extBlendMinmax.MAX_EXT;\r\n    }\r\n  }\r\n\r\n  if (!gl.FRAGMENT_SHADER_DERIVATIVE_HINT) {\r\n    const extStandardDerivatives = gl.getExtension('OES_standard_derivatives');\r\n    if (extStandardDerivatives) {\r\n      gl.FRAGMENT_SHADER_DERIVATIVE_HINT = extStandardDerivatives.FRAGMENT_SHADER_DERIVATIVE_HINT_OES;\r\n    }\r\n  }\r\n\r\n  if (!gl.UNSIGNED_INT_24_8) {\r\n    const extDepthTexture = gl.getExtension('WEBGL_depth_texture');\r\n    if (extDepthTexture) {\r\n      gl.UNSIGNED_INT_24_8 = extDepthTexture.UNSIGNED_INT_24_8_WEBGL;\r\n    }\r\n  }\r\n\r\n  if (!gl.HALF_FLOAT) {\r\n    const extTextureHalfFloat = gl.getExtension('OES_texture_half_float');\r\n    if (extTextureHalfFloat) {\r\n      gl.HALF_FLOAT = extTextureHalfFloat.HALF_FLOAT_OES;\r\n    }\r\n  }\r\n\r\n  // texture compression\r\n  gl.extS3tc = gl.getExtension('WEBGL_compressed_texture_s3tc');\r\n  gl.extPvrtc = gl.getExtension('WEBGL_compressed_texture_pvrtc');\r\n  gl.extAstc = gl.getExtension('WEBGL_compressed_texture_astc');\r\n  gl.extEtc = gl.getExtension('WEBG_compressed_texture_etc');\r\n  gl.extEtc1 = gl.getExtension('WEBG_compressed_texture_etc1');\r\n  gl.extBc7 = gl.getExtension('EXT_texture_compression_bptc');\r\n\r\n  gl.extDebugShaders = gl.getExtension('WEBGL_debug_shaders');\r\n\r\n  gl._elementIndexUint = !!gl.getExtension('OES_element_index_uint');\r\n  gl._fragDepth = !!gl.getExtension('EXT_frag_depth');\r\n  gl._textureFloat = !!gl.getExtension('OES_texture_float');\r\n  gl._textureFloatLinear = !!gl.getExtension('OES_texture_float_linear');\r\n\r\n  gl._colorBufferFloat = !!gl.getExtension('EXT_color_buffer_float');\r\n  gl._colorBufferHalfFloat = !!gl.getExtension('EXT_color_buffer_half_float');\r\n  gl._floatBlend = !!gl.getExtension('EXT_float_blend');\r\n\r\n  gl._shaderTextureLod = !!gl.getExtension('EXT_shader_texture_lod');\r\n\r\n  return gl;\r\n}\r\n\r\nexport default createContext;\r\n","function defined(a) {\r\n  return a !== null && a !== undefined;\r\n}\r\n\r\nexport default defined;\r\n","import defined from \"./defined\";\r\n\r\nconst global = window;\r\n\r\n/**\r\n * Create a program and/or bind attribute location.\r\n * @param {WebGLRenderingContext} gl \r\n * @param {String} vertexShaderSource \r\n * @param {String} fragmentShaderSource \r\n * @param {Object} attributeLocations { [attributeName]: location }\r\n * @returns \r\n */\r\nfunction createProgram(gl, vertexShaderSource, fragmentShaderSource, attributeLocations) {\r\n  const vs = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vs, vertexShaderSource);\r\n  gl.compileShader(vs);\r\n  \r\n  const fs = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fs, fragmentShaderSource);\r\n  gl.compileShader(fs);\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vs);\r\n  gl.attachShader(program, fs);\r\n\r\n  gl.deleteShader(vs);\r\n  gl.deleteShader(fs);\r\n\r\n  // bind attribute location\r\n  if (defined(attributeLocations)) {\r\n    for (const attributeName in attributeLocations) {\r\n      if (Object.hasOwnProperty.call(attributeLocations, attributeName)) {\r\n        const location = attributeLocations[attributeName];\r\n        gl.bindAttribLocation(program, location, attributeName);\r\n      }\r\n    }\r\n  }\r\n\r\n  gl.linkProgram(program);\r\n\r\n  let log = '';\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\r\n      log = gl.getShaderInfoLog(fs);\r\n      console.error('Fragment shader failed to compiled: ' + log);\r\n    }\r\n\r\n    if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\r\n      log = gl.getShaderInfoLog(vs);\r\n      console.error('Vertex shader failed to compiled: ' + log);\r\n    }\r\n\r\n    log = gl.getProgramInfoLog(program);\r\n    console.error('Shader program link log: ' + log);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\nfunction setCanvasToDisplaySize(canvas) {\r\n  const dpr = global.devicePixelRatio;\r\n  const displayWidth = Math.round(canvas.clientWidth * dpr);\r\n  const displayHeight = Math.round(canvas.clientHeight * dpr);\r\n\r\n  const needResize = canvas.width !== displayWidth ||\r\n                     canvas.height !== displayHeight;\r\n\r\n  if (needResize) {\r\n    canvas.width = displayWidth;\r\n    canvas.height = displayHeight;\r\n  }\r\n}\r\n\r\nfunction validateStencilFunc(func) {\r\n  func = func.toUpperCase();\r\n  if (func === 'NEVER' ||\r\n    func === 'ALWAYS' ||\r\n    func === 'LESS' ||\r\n    func === 'LEQUAL' ||\r\n    func === 'NOTEQUAL' ||\r\n    func === 'EQUAL' ||\r\n    func === 'GREATER' ||\r\n    func === 'GEQUAL'\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction validateStencilOp(op) {\r\n  op = op.toUpperCase();\r\n  if (op === 'KEEP' ||\r\n    op === 'ZERO' ||\r\n    op === 'REPLACE' ||\r\n    op === 'INCR' ||\r\n    op === 'DECR' ||\r\n    op === 'INVERT' ||\r\n    op === 'INCR_WRAP' ||\r\n    op === 'DECR_WRAP'\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction validateGLConstantDefination(gl, constantName) {\r\n  const constant = gl[constantName];\r\n  if (!defined(constant)) {\r\n    throw new Error('gl.' + constantName + ' is not defined.');\r\n  }\r\n  return constant;\r\n}\r\n\r\nexport {\r\n  validateGLConstantDefination,\r\n  validateStencilFunc,\r\n  validateStencilOp,\r\n  createProgram,\r\n  setCanvasToDisplaySize,\r\n};\r\n","import defined from './defined.js';\r\nimport {\r\n  validateGLConstantDefination,\r\n  validateStencilFunc,\r\n  validateStencilOp,\r\n} from \"./glUtils.js\";\r\n\r\nfunction applyStencilStateSeparate(gl, face, state) {\r\n  if (defined(state.writeMask)) {\r\n    gl.stencilMaskSeparate(face, state.writeMask);\r\n  }\r\n\r\n  if (defined(state.func) &&\r\n    defined(state.ref) &&\r\n    defined(state.valueMask)\r\n  ) {\r\n    if (validateStencilFunc(state.func) === false) {\r\n      throw new Error('setState: stencil func is invalid, current is ' + state.func + '!');\r\n    }\r\n    const func = state.func.toUpperCase();\r\n    gl.stencilFuncSeparate(face, gl[func], state.ref, state.valueMask);\r\n  }\r\n\r\n  if (defined(state.fail) &&\r\n    defined(state.zfail) &&\r\n    defined(state.zpass)\r\n  ) {\r\n    if (validateStencilOp(state.fail) === false ||\r\n      validateStencilOp(state.zfail) === false ||\r\n      validateStencilOp(state.zpass) === false\r\n    ) {\r\n      throw new Error('setState: stencil op is invalid, current is ' + state.fail + ', ' + state.zfail + ', ' + state.zpass + '!');\r\n    }\r\n    const fail = state.fail.toUpperCase();\r\n    const zfail = state.zfail.toUpperCase();\r\n    const zpass = state.zpass.toUpperCase();\r\n    gl.stencilOpSeparate(face, gl[fail], gl[zfail], gl[zpass]);\r\n  }\r\n}\r\n\r\nexport default function setState(gl, state) {\r\n  const { depthTest, stencilTest, colorMask, cull, blend, viewport, scissor, polygonOffset, sampleCoverage, dither } = state;\r\n\r\n  if (cull) {\r\n    if (cull.enable) {\r\n      gl.enable(gl.CULL_FACE);\r\n    } else {\r\n      gl.disable(gl.CULL_FACE);\r\n    }\r\n\r\n    const face = cull.face && cull.face.toUpperCase();\r\n    if (face === 'BACK' || face === 'FRONT' || face === 'FRONT_AND_BACK') {\r\n      gl.cullFace(gl[face]);\r\n    }\r\n\r\n    let frontFace = defined(cull.frontFace) && cull.frontFace.toUpperCase();\r\n    if (frontFace === 'CCW' || frontFace === 'CW') {\r\n      gl.frontFace(gl[frontFace]);\r\n    }\r\n  }\r\n\r\n  if (depthTest) {\r\n    if (depthTest.enable === true) {\r\n      gl.enable(gl.DEPTH_TEST);\r\n    } else if (depthTest.enable === false) {\r\n      gl.disable(gl.DEPTH_TEST);\r\n    }\r\n\r\n    if (depthTest.func) {\r\n      const func = depthTest.func.toUpperCase();\r\n      gl.depthFunc(gl[func]);\r\n    }\r\n\r\n    if (depthTest.write === true) {\r\n      gl.depthMask(true);\r\n    } else if (depthTest.write === false) {\r\n      gl.depthMask(false);\r\n    }\r\n  }\r\n\r\n  if (stencilTest) {\r\n    if (stencilTest.enable === true) {\r\n      gl.enable(gl.STENCIL_TEST);\r\n    } else if (stencilTest.enable === false) {\r\n      gl.disable(gl.STENCIL_TEST);\r\n    }\r\n\r\n    // pass = (ref & readMask) func (stencilValue & redMask)\r\n    // If the stencil test fails, the incoming fragment is discarded\r\n    // if (!pass)\r\n         // update stencilValue\r\n    //   stencilValue = failOp(ref, stencilValue) & writeMask\r\n    // else if zfail\r\n    //   zfailOp\r\n    // else if zpass\r\n    //   zpassOp \r\n    const { front, back } = stencilTest;\r\n    if (front) {\r\n      applyStencilStateSeparate(gl, gl.FRONT, front);\r\n    }\r\n    if (back) {\r\n      applyStencilStateSeparate(gl, gl.BACK, back);\r\n    }\r\n  }\r\n\r\n  if (colorMask) {\r\n    gl.colorMask(colorMask[0], colorMask[1], colorMask[2], colorMask[3]);\r\n  }\r\n\r\n  if (blend) {\r\n    if (blend.enable === true) {\r\n      gl.enable(gl.BLEND)\r\n    } else if (blend.enable === false) {\r\n      gl.disable(gl.BLEND)\r\n    }\r\n\r\n    if (blend.blendColor) {\r\n      gl.blendColor(...blend.blendColor);\r\n    }\r\n\r\n    if (blend.blendEquationSeparate) {\r\n      const { rgb, alpha } = blend.blendEquationSeparate;\r\n      if (!defined(rgb) || !defined(alpha)) {\r\n        throw new Error('To use blendEquationSeparate you MUST specify rgb and alpha.');\r\n      }\r\n      const RGB = rgb.toUpperCase();\r\n      const ALPHA = alpha.toUpperCase();\r\n\r\n      const glRGB = gl[RGB];\r\n      const glALPHA = gl[ALPHA];\r\n      if (!defined(glRGB)) {\r\n        throw new Error('gl.' + RGB + ' is undefined.');\r\n      }\r\n      if (!defined(glALPHA)) {\r\n        throw new Error('gl.' + ALPHA + ' is undefined.');\r\n      }\r\n\r\n      gl.blendEquationSeparate(glRGB, glALPHA);\r\n    } else if (blend.blendEquation) {\r\n      const equationName = blend.blendEquation.toUpperCase();\r\n      const equation = gl[equationName];\r\n      if (!defined(equation)) {\r\n        throw new Error(equationName + ' is invalid.');\r\n      }\r\n\r\n      gl.blendEquation(equation);\r\n    }\r\n\r\n    const blendFuncSeparate = blend.blendFuncSeparate;\r\n    if (defined(blendFuncSeparate)) {\r\n      const { srcRGB, dstRGB, srcAlpha, dstAlpha } = blendFuncSeparate;\r\n      if (!defined(srcRGB)) {\r\n        throw new Error('To use blendFuncSeparate you MUST specify srcRGB property.');\r\n      }\r\n      if (!defined(dstRGB)) {\r\n        throw new Error('To use blendFuncSeparate you MUST specify dstRGB property.');\r\n      }\r\n      if (!defined(srcAlpha)) {\r\n        throw new Error('To use blendFuncSeparate you MUST specify srcAlpha property.');\r\n      }\r\n      if (!defined(dstAlpha)) {\r\n        throw new Error('To use blendFuncSeparate you MUST specify dstAlpha property.');\r\n      }\r\n\r\n      const SRCRGB = srcRGB.toUpperCase();\r\n      const DSTRGB = dstRGB.toUpperCase();\r\n      const SRCALPHA = srcAlpha.toUpperCase();\r\n      const DSTALPHA = dstAlpha.toUpperCase();\r\n\r\n      const glSrcRGB = validateGLConstantDefination(gl, SRCRGB);\r\n      const glDstRGB = validateGLConstantDefination(gl, DSTRGB);\r\n      const glSrcAlpha = validateGLConstantDefination(gl, SRCALPHA);\r\n      const glDstAlpha = validateGLConstantDefination(gl, DSTALPHA);\r\n\r\n      gl.blendFuncSeparate(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha);\r\n    } else if (defined(blend.blendFunc)) {\r\n      const srcFuncName = blend.blendFunc[0].toUpperCase();\r\n      const dstFuncName = blend.blendFunc[1].toUpperCase();\r\n      const src = validateGLConstantDefination(gl, srcFuncName);\r\n      const dst = validateGLConstantDefination(gl, dstFuncName);\r\n      gl.blendFunc(src, dst);\r\n    }\r\n  }\r\n\r\n  if (viewport) {\r\n    gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\r\n  }\r\n\r\n  if (scissor) {\r\n    if (scissor.enable === true) {\r\n      gl.enable(gl.SCISSOR_TEST);\r\n    } else if (scissor.enable === false) {\r\n      gl.disable(gl.SCISSOR_TEST);\r\n    }\r\n    const rect = scissor.rect;\r\n    if (rect) {\r\n      gl.scissor(rect[0], rect[1], rect[2], rect[3]);\r\n    }\r\n  }\r\n\r\n  // motivation: for render coplanar primitives\r\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\r\n  if (defined(polygonOffset)) {\r\n    if (polygonOffset.enable === true) {\r\n      gl.enable(gl.POLYGON_OFFSET_FILL);\r\n    } else if (polygonOffset.enable === false) {\r\n      gl.disable(gl.POLYGON_OFFSET_FILL);\r\n    } else {\r\n      console.warn('polygonOffset.enable MUST be either true or false, current is ' + polygonOffset.enable.toString() + '.');\r\n    }\r\n    // Offset value: o = m * factor + r * units,\r\n    // where m is maximum depth slope of a triangle,\r\n    // r is minimum resolvable difference, which is an implementation-dependent constant.\r\n    gl.polygonOffset(polygonOffset.factor, polygonOffset.units);\r\n  }\r\n\r\n  if (defined(sampleCoverage)) {\r\n    const { alphaToCoverage, value, invert, enable } = sampleCoverage;\r\n\r\n    if (alphaToCoverage === true) {\r\n      gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\r\n    } else if (alphaToCoverage === false) {\r\n      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\r\n    }\r\n\r\n    if (enable === true) {\r\n      gl.enable(gl.SAMPLE_COVERAGE);\r\n    } else if (enable === false) {\r\n      gl.disable(gl.SAMPLE_COVERAGE);\r\n    }\r\n\r\n    if (defined(value) && defined(invert)) {\r\n      if (invert !== true && invert !== false) {\r\n        console.warn('sampleCoverage.invert MUST be boolean.');\r\n      }\r\n      gl.sampleCoverage(value, invert);\r\n    }\r\n  }\r\n\r\n  if (defined(dither)) {\r\n    if (dither === true) {\r\n      gl.enable(gl.DITHER);\r\n    } else if (dither === false) {\r\n      gl.disable(gl.DITHER);\r\n    } else {\r\n      console.warn('setState: dither MUST be a boolean value, otherwise it will be ignored.');\r\n    }\r\n  }\r\n  \r\n}\r\n","const WebGLConstant = {\r\n  // ACTIVE_TEXTURE\r\n  34016: 'ACTIVE_TEXTURE',\r\n  33984: 'TEXTURE0',\r\n  33985: 'TEXTURE1',\r\n  33986: 'TEXTURE2',\r\n  33987: 'TEXTURE3',\r\n  33988: 'TEXTURE4',\r\n  33989: 'TEXTURE5',\r\n  33990: 'TEXTURE6',\r\n  33991: 'TEXTURE7',\r\n  33992: 'TEXTURE8',\r\n  33993: 'TEXTURE9',\r\n  33994: 'TEXTURE10',\r\n  33995: 'TEXTURE11',\r\n  33996: 'TEXTURE12',\r\n  33997: 'TEXTURE13',\r\n  33998: 'TEXTURE14',\r\n  33999: 'TEXTURE15',\r\n  34000: 'TEXTURE16',\r\n  34001: 'TEXTURE17',\r\n  34002: 'TEXTURE18',\r\n  34003: 'TEXTURE19',\r\n  34004: 'TEXTURE20',\r\n  34005: 'TEXTURE21',\r\n  34006: 'TEXTURE22',\r\n  34007: 'TEXTURE23',\r\n  34008: 'TEXTURE24',\r\n  34009: 'TEXTURE25',\r\n  34010: 'TEXTURE26',\r\n  34011: 'TEXTURE27',\r\n  34012: 'TEXTURE28',\r\n  34013: 'TEXTURE29',\r\n  34014: 'TEXTURE30',\r\n  34015: 'TEXTURE31',\r\n\r\n  3410: 'RED_BITS',\r\n  3411: 'GREEN_BITS',\r\n  3412: 'BLUE_BITS',\r\n  3413: 'ALPHA_BITS',\r\n\r\n  2884: 'CULL_FACE',\r\n  // cullFace\r\n  2885: 'CULL_FACE_MODE',\r\n  1028: 'FRONT',\r\n  1029: 'BACK',\r\n  1032: 'FRONT_AND_BACK',\r\n\r\n  // depthFunc, stencilFunc\r\n  512: 'NEVER',\r\n  513: 'LESS',\r\n  514: 'EQUAL',\r\n  515: 'LEQUAL',\r\n  516: 'GREATER',\r\n  517: 'NOTEQUAL',\r\n  518: 'GEQUAL',\r\n  519: 'ALWAYS',\r\n\r\n  // stencilOp(fail, zfail, zpass)\r\n  // stencilOpSeparate(face, fail, zfail, zpass)\r\n  0: 'ZERO', // blendFunc\r\n  1: 'ONE',\r\n  5386: 'INVERT',\r\n  7680: 'KEEP',\r\n  7681: 'REPLACE',\r\n  7682: 'INCR',\r\n  7683: 'DECR',\r\n  34055: 'INCR_WRAP',\r\n  34056: 'DECR_WRAP',\r\n\r\n  // blendEquationSeparate\r\n  32774: 'FUNC_ADD',\r\n  32778: 'FUNC_SUBTRACT',\r\n  32779: 'FUNC_REVERSE_SUBTRACT',\r\n\r\n  // blendFuncSeparate\r\n  768: 'SRC_COLOR',\r\n  770: 'SRC_ALPHA',\r\n  774: 'DST_COLOR',\r\n  772: 'DST_ALPHA',\r\n  32769: 'CONSTANT_COLOR',\r\n  32771: 'CONSTANT_ALPHA',\r\n\r\n  769: 'ONE_MINUS_SRC_COLOR',\r\n  771: 'ONE_MINUS_SRC_ALPHA',\r\n  775: 'ONE_MINUS_DST_COLOR',\r\n  773: 'ONE_MINUS_DST_ALPHA',\r\n  32770: 'ONE_MINUS_CONSTANT_COLOR',\r\n  32772: 'ONE_MINUS_CONSTANT_ALPHA',\r\n\r\n  // FRONT_FACE\r\n  2304: 'CW',\r\n  2305: 'CCW',\r\n\r\n  // hint\r\n  4352: 'DONT_CARE',\r\n  4353: 'FASTEST',\r\n  4354: 'NICEST',\r\n\r\n  // WEBGL_compressed_texture_s3tc\r\n  33776: 'COMPRESSED_RGB_S3TC_DXT1_EXT',\r\n  33777: 'COMPRESSED_RGBA_S3TC_DXT1_EXT',\r\n  33778: 'COMPRESSED_RGBA_S3TC_DXT3_EXT',\r\n  33779: 'COMPRESSED_RGBA_S3TC_DXT5_EXT',\r\n  // EXT_texture_compression_bptc\r\n  36492: 'COMPRESSED_RGBA_BPTC_UNORM_EXT',\r\n  36493: 'COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT',\r\n  36494: 'COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT',\r\n  36495: 'COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT',\r\n  // EXT_texture_compression_rgtc\r\n  36283: 'COMPRESSED_RED_RGTC1_EXT',\r\n  36284: 'COMPRESSED_SIGNED_RED_RGTC1_EXT',\r\n  36285: 'COMPRESSED_RED_GREEN_RGTC2_EXT',\r\n  36286: 'COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT',\r\n\r\n  // UNPACK_COLORSPACE_CONVERSION_WEBGL\r\n  37444: 'BROWSER_DEFAULT_WEBGL',\r\n\r\n  BYTE: 0x1400,\r\n  UNSIGNED_BYTE: 0x1401,\r\n  SHORT: 0x1402,\r\n  UNSIGNED_SHORT: 0x1403,\r\n  INT: 0x1404,\r\n  UNSIGNED_INT: 0x1405,\r\n  FLOAT: 0x1406,\r\n};\r\n\r\nexport default WebGLConstant;\r\n","import defaultValue from './defaultValue.js';\r\n\r\nconst FRAMEBUFFER_STATUS = {\r\n  36053: 'FRAMEBUFFER_COMPLETE',\r\n  36054: 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',\r\n  36055: 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',\r\n  36057: 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',\r\n  36061: 'FRAMEBUFFER_UNSUPPORTED',\r\n};\r\n\r\nfunction createFramebuffer(gl, options) {\r\n  const { colorTexture, depthTexture, depthRenderbuffer } = options;\r\n  const colorAttachments = defaultValue(options.colorAttachments, [ colorTexture ])\r\n\r\n  const fb = gl.createFramebuffer();\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\r\n\r\n  // color\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  const colorAttachmentsLength = colorAttachments.length;\r\n  if (colorAttachmentsLength > 1) {\r\n    const ext = gl.getExtension('WebGL_draw_buffers');\r\n    const drawBuffers = [];\r\n    for (let i = 0; i < colorAttachmentsLength; i++) {\r\n      drawBuffers.push(ext.COLOR_ATTACHMENT0_WEBGL + i);\r\n    }\r\n    ext.drawBuffersWEBGL(drawBuffers);\r\n\r\n    for (let i = 0; i < colorAttachmentsLength; i++) {\r\n      const colorAttachment = colorAttachments[i];\r\n      gl.bindTexture(gl.TEXTURE_2D, colorAttachment);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, colorAttachment, 0);\r\n    }\r\n  } else {\r\n    gl.bindTexture(gl.TEXTURE_2D, colorTexture);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTexture, 0);\r\n  }\r\n  gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n  // depth\r\n  if (depthTexture) {\r\n    gl.bindTexture(gl.TEXTURE_2D, depthTexture);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture, 0);\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n  }\r\n  else if (depthRenderbuffer) {\r\n    const renderbuffer = gl.createRenderbuffer();\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\r\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, depthRenderbuffer.width, depthRenderbuffer.height);\r\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n  }\r\n\r\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\r\n    throw new Error('createFramebuffer: framebuffer combination is NOT completed! Current status is ' + FRAMEBUFFER_STATUS[status] + '.');\r\n  }\r\n\r\n  return fb;\r\n}\r\n\r\nexport default createFramebuffer;\r\n","function isPowerOfTwo(value) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nexport default isPowerOfTwo;\r\n","import defaultValue from './defaultValue.js';\r\nimport WebglConstant from './WebglConstant.js';\r\n\r\nconst cachedBuffer = {};\r\n\r\nfunction isArrayBufferView(value) {\r\n  return value instanceof Float32Array ||\r\n         value instanceof Uint8Array ||\r\n         value instanceof Uint16Array ||\r\n         value instanceof Uint32Array ||\r\n         value instanceof Int8Array ||\r\n         value instanceof Int16Array ||\r\n         value instanceof Int32Array;\r\n}\r\n\r\nfunction getIndicesType(indices) {\r\n  let indicesType;\r\n  let max = indices[0];\r\n  for (let i = 1; i < indices.length; i++) {\r\n    max = Math.max(max, indices[i]);\r\n  }\r\n\r\n  if (max <= 255) {\r\n    indicesType = WebglConstant.UNSIGNED_BYTE;\r\n  } else if (max <= 65535) {\r\n    indicesType = WebglConstant.UNSIGNED_SHORT;\r\n  } else {\r\n    indicesType = WebglConstant.UNSIGNED_INT;\r\n  }\r\n\r\n  return indicesType;\r\n}\r\n\r\nfunction createBuffer(gl, bufferTarget, source, usage) {\r\n  const buffer = gl.createBuffer();\r\n  gl.bindBuffer(bufferTarget, buffer);\r\n  gl.bufferData(bufferTarget, source, usage);\r\n  gl.bindBuffer(bufferTarget, null);\r\n  return buffer;\r\n}\r\n\r\nfunction createAttributeBuffer(gl, typedArrayOrArray, usage) {\r\n  let bufferKey = '';\r\n  for (const element of typedArrayOrArray) {\r\n    if (bufferKey.length > 10e5) break;\r\n    bufferKey += `${element.toFixed(3)},`;\r\n  }\r\n  let buffer = cachedBuffer[bufferKey];\r\n  if (buffer) {\r\n    return buffer;\r\n  }\r\n\r\n  usage = defaultValue(usage, gl.STATIC_DRAW);\r\n\r\n  let typedArray;\r\n  if (Array.isArray(typedArrayOrArray)) {\r\n    typedArray = new Float32Array(typedArrayOrArray);\r\n  } else if (isArrayBufferView(typedArrayOrArray)) {\r\n    typedArray = typedArrayOrArray;\r\n  } else {\r\n    throw new Error('Buffer data' + typedArrayOrArray + 'must be TypedArray or Array ');\r\n  }\r\n\r\n  buffer = createBuffer(gl, gl.ARRAY_BUFFER, typedArray, usage)\r\n  cachedBuffer[bufferKey] = buffer;\r\n  return buffer;\r\n}\r\n\r\nfunction createIndicesBuffer(gl, typedArrayOrArray, usage) {\r\n  const bufferKey = typedArrayOrArray.toString();\r\n  let buffer = cachedBuffer[bufferKey];\r\n  if (buffer) {\r\n    return buffer;\r\n  }\r\n\r\n  usage = defaultValue(usage, gl.STATIC_DRAW);\r\n\r\n  let typedArray;\r\n  const indicesType = getIndicesType(typedArrayOrArray);\r\n\r\n  if (indicesType === gl.UNSIGNED_BYTE) {\r\n\r\n    typedArray = new Uint8Array(typedArrayOrArray);\r\n\r\n  } else if (indicesType === gl.UNSIGNED_SHORT) {\r\n\r\n    typedArray = new Uint16Array(typedArrayOrArray);\r\n\r\n  } else if (indicesType === gl.UNSIGNED_INT) {\r\n\r\n    typedArray = new Uint32Array(typedArrayOrArray);\r\n    gl.getExtension('OES_element_index_unit');\r\n\r\n  } else {\r\n    throw new Error('Buffer data must be TypedArray or Array ');\r\n  }\r\n\r\n  buffer = createBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, typedArray, usage);\r\n  // Store index buffer data type\r\n  buffer.indicesType = indicesType;\r\n  cachedBuffer[bufferKey] = buffer;\r\n  return buffer;\r\n}\r\n\r\nexport {\r\n  cachedBuffer,\r\n  createAttributeBuffer,\r\n  createIndicesBuffer,\r\n  getIndicesType,\r\n};\r\n","import { createAttributeBuffer, createIndicesBuffer } from './buffer.js';\r\nimport defined from './defined.js';\r\n\r\n/**\r\n * Create a vertex array object. You can imagine it like this\r\n * <pre>\r\n * var glState = {\r\n *   attributeState: {\r\n *     ELEMENT_ARRAY_BUFFER: null,\r\n *     attributes: [\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *     ],\r\n *   },\r\n * </pre>\r\n * @param {WebGLRenderingContext|WebGL2RenderingContext} gl \r\n * @param {Object} options \r\n * @param {Object} options.attributes The key of Object is vertex attribute name, value is a Object, it includes <code>location</code>, <code>size</code> and <code>data</code> property, for example:\r\n * <pre>\r\n * {\r\n *   a_pos: {\r\n *     location: 0,\r\n *     size: 3,\r\n *     data: [\r\n *       0, 0, 0,\r\n *       1, 1, 1,\r\n *       0, 1, 0,\r\n *     ]\r\n *   }\r\n * }\r\n * </pre>\r\n * @param {Object} options.indices ELEMENT_ARRAY_BUFFER of vertex array.\r\n * @returns {WebGLVertexArrayObjectOES}\r\n */\r\nfunction createVAO(gl, options) {\r\n  if (!gl.createVertexArray) return undefined;\r\n\r\n  const oldVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n\r\n  const vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n\r\n  const attributes = options.attributes;\r\n  const indices = options.indices;\r\n\r\n  for (const attributeName in attributes) {\r\n    if (Object.hasOwnProperty.call(attributes, attributeName)) {\r\n      const { location, data, size } = attributes[attributeName];\r\n\r\n      const buffer = createAttributeBuffer(gl, data, gl.STATIC_DRAW);\r\n\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      gl.enableVertexAttribArray(location);\r\n\r\n      // TODO: expose attribute data type\r\n      const type = gl.FLOAT;\r\n      const normalized = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\r\n    }\r\n  }\r\n\r\n  if (defined(indices)) {\r\n    const indicesBuffer = createIndicesBuffer(gl, indices, gl.STATIC_DRAW);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);\r\n  }\r\n\r\n  gl.bindVertexArray(oldVao);\r\n\r\n  return vao;\r\n}\r\n\r\nexport default createVAO;","import isArrayLike from './isArrayLike.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport {\r\n  createProgram,\r\n} from './glUtils.js';\r\nimport defined from './defined.js';\r\nimport {\r\n  createIndicesBuffer,\r\n  getIndicesType,\r\n} from './buffer.js';\r\nimport createVAO from './createVAO.js';\r\n\r\nconst cachedProgram = {};\r\nconst cachedTextures = {};\r\n\r\nfunction getNumberOfComponentsByType(type) {\r\n  let numberOfComponents = 0;\r\n\r\n  switch (type) {\r\n  case 5126: // FLOAT\r\n    numberOfComponents = 1;\r\n    break;\r\n  case 35664: // FLOAT_VEC2\r\n    numberOfComponents = 2;\r\n    break;\r\n  case 35665: // gl.FLOAT_VEC3\r\n    numberOfComponents = 3;\r\n    break;\r\n  case 35666: // FLOAT_VEC4\r\n    numberOfComponents = 4;\r\n    break;\r\n  case 35674: // FLOAT_MAT2\r\n    numberOfComponents = 4;\r\n    break;\r\n  case 35675: // FLOAT_MAT3\r\n    numberOfComponents = 9;\r\n    break;\r\n  case 35676: // FLOAT_MAT4\r\n    numberOfComponents = 16;\r\n    break;\r\n  default:\r\n    throw new Error('Unrecognize ' + type + ' type.');\r\n  }\r\n  return numberOfComponents;\r\n}\r\n\r\nfunction getAttributeSize(activeAttribute) {\r\n  const { name, size, type } = activeAttribute;\r\n  const componentCount = getNumberOfComponentsByType(type);\r\n  return size * componentCount;\r\n}\r\n\r\nconst vaoCache = {};\r\nfunction getVaoKey(attributes, indices) {\r\n  let key = '';\r\n  for (const attributeName in attributes) {\r\n    if (Object.hasOwnProperty.call(attributes, attributeName)) {\r\n      const attribute = attributes[attributeName];\r\n      key += attribute.toString();\r\n    }\r\n  }\r\n\r\n  if (indices) {\r\n    key += indices.toString();\r\n  }\r\n\r\n  return key;\r\n}\r\n\r\n/**\r\n * Execute a draw command.\r\n * @param {WebGLRenderingContext|WebGL2RenderingContext} gl \r\n * @param {Object} options \r\n * @param {String} options.vs Vertex shader text\r\n * @param {String} options.fs Fragment shader text\r\n * @param {Object} [options.attributes] use <code>attributes</code> or <code>vao</code> property.\r\n * @param {WebGLVertexArrayObjectOES} [options.vao] @see {@link createVAO}\r\n * @param {Object} [options.attributeLocations] If you define <code>vao</code> property, in order to correspond to attribute location of VAO, you must specify the location for the vertex attribute of shader program.\r\n * @param {Object} [options.uniforms] The key of object is uniform name, value can be string(texture image file path), number, Array, ArrayBufferView. Uniform array is supported.\r\n * @param {Array | Uint8Array | Uint16Array | Uint32Array} [options.indices] Vertex indices, when using an Array, it is treated as Uint16Array, so if the maximum value of indices is greater then 65535, Uint32Array MUST be used.\r\n * @param {Number} [options.count=indices.length] The number of vertices.\r\n * @param {Number} [options.primitiveType=gl.TRIANGLES] Primitive type. <code>gl.LINES</code>, <code>gl.POINTS</code>.\r\n * @param {WebGLFramebuffer | null} [options.fb=null] See {@link createFramebuffer}.\r\n */\r\nfunction draw(gl, options) {\r\n  const {\r\n    attributes,\r\n    indices,\r\n    vao,\r\n    vs: vsSource,\r\n    fs: fsSource,\r\n    attributeLocations,\r\n    fb\r\n  } = options;\r\n\r\n  let count = options.count;\r\n  if (!defined(count) && defined(indices)) {\r\n    count = indices.length;\r\n  }\r\n  if (!defined(count)) {\r\n    throw new Error('vertices count or indices is not defined.');\r\n  }\r\n\r\n  if (defined(vao) && !defined(attributeLocations)) {\r\n    throw new Error('To use vao, you must defined attributeLocations.');\r\n  }\r\n\r\n  const primitiveType = defaultValue(options.primitiveType, gl.TRIANGLES);\r\n  const uniforms = defaultValue(options.uniforms, defaultValue.EMPTY_OBJECT);\r\n\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\r\n\r\n  const key = vsSource + fsSource;\r\n  let program = cachedProgram[key];\r\n  if (!program) {\r\n    program = createProgram(gl, vsSource, fsSource, attributeLocations);\r\n    cachedProgram[key] = program;\r\n  }\r\n\r\n  gl.useProgram(program);\r\n\r\n  // attributes\r\n  const numberOfAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n\r\n  if (defined(vao)) {\r\n\r\n    gl.bindVertexArray(vao);\r\n\r\n  } else if (defined(attributes)) {\r\n    const vaoKey = getVaoKey(attributes, indices);\r\n    let vao = vaoCache[vaoKey];\r\n    if (!vao) {\r\n      const vaoAttributes = {};\r\n      for (let i = 0; i < numberOfAttributes; i++) {\r\n        const activeAttribute = gl.getActiveAttrib(program, i);\r\n        const attributeName = activeAttribute.name;\r\n\r\n        if (Object.hasOwnProperty.call(attributes, attributeName)) {\r\n          const attribute = attributes[attributeName];\r\n          const attribLocation = gl.getAttribLocation(program, attributeName);\r\n  \r\n          if (attribLocation === -1) {\r\n            continue;\r\n          }\r\n\r\n          const size = getAttributeSize(activeAttribute);\r\n          vaoAttributes[attributeName] = {\r\n            location: attribLocation,\r\n            size: size,\r\n            data: attribute,\r\n          };\r\n        }\r\n      }\r\n\r\n      vao = createVAO(gl, {\r\n        attributes: vaoAttributes,\r\n        indices: indices,\r\n      });\r\n\r\n      vaoCache[vaoKey] = vao;\r\n    }\r\n\r\n    gl.bindVertexArray(vao);\r\n  } else {\r\n    throw new Error('vao or attributes must be defined.');\r\n  }\r\n\r\n  // uniforms\r\n  const numberOfUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n  const maximumTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n  let currentTextureUnit = 0;\r\n  for (let i = 0; i < numberOfUniforms; i++) {\r\n    const activeUniform = gl.getActiveUniform(program, i);\r\n    let uniformName = activeUniform.name;\r\n    const type = activeUniform.type;\r\n    let isUniformArray = false;\r\n\r\n    const indexOfBracket = uniformName.indexOf('[');\r\n    if (indexOfBracket >= 0) {\r\n      // \"u_xxx[0]\" => \"u_xxx\"\r\n      uniformName = uniformName.slice(0, indexOfBracket);\r\n      isUniformArray = true;\r\n    }\r\n    \r\n    if (Object.hasOwnProperty.call(uniforms, uniformName)) {\r\n      const uniform = uniforms[uniformName];\r\n      const uniformLocation = gl.getUniformLocation(program, uniformName);\r\n\r\n      if (uniformLocation === null) {\r\n        continue;\r\n      }\r\n\r\n      // support float, vec[234] uniform array\r\n      if (isUniformArray) {\r\n        const numberOfComponents = getNumberOfComponentsByType(type);\r\n\r\n        gl['uniform' + numberOfComponents + 'fv'](uniformLocation, Array.from(uniform));\r\n        continue;\r\n      }\r\n\r\n      const typeOfUniform = typeof uniform;\r\n      const textureUnit = gl.TEXTURE0 + currentTextureUnit;\r\n      if (uniform instanceof WebGLTexture) {\r\n        gl.activeTexture(textureUnit);\r\n\r\n        if (activeUniform.type === gl.SAMPLER_2D) {\r\n          gl.bindTexture(gl.TEXTURE_2D, uniform);\r\n        } else if (activeUniform.type === gl.SAMPLER_3D) {\r\n          gl.bindTexture(gl.TEXTURE_3D, uniform);\r\n        } else if (activeUniform.type === gl.SAMPLER_CUBE) {\r\n          gl.bindTexture(gl.TEXTURE_CUBE_MAP, uniform);\r\n        } else {\r\n          throw new Error(activeUniform, 'type MUST be SAMPLER_2D or SAMPLER_CUBE');\r\n        }\r\n\r\n        gl.uniform1i(uniformLocation, currentTextureUnit);\r\n        currentTextureUnit++;\r\n      } else if (isArrayLike(uniform)) {\r\n        const size = uniform.length;\r\n        if (size <= 4) {\r\n          gl['uniform' + size + 'fv' ](uniformLocation, uniform);\r\n        } else if (size <= 16) {\r\n          const order = Math.floor(Math.sqrt(size));\r\n          const transpose = false; // MUST be false\r\n          gl['uniformMatrix' + order + 'fv'](uniformLocation, transpose, Array.from(uniform));\r\n        }\r\n      } else if (type === gl.FLOAT /*typeOfUniform === 'number'*/) {\r\n        gl.uniform1f(uniformLocation, uniform);\r\n      } else if (type === gl.BOOL || type === gl.INT) {\r\n        gl.uniform1i(uniformLocation, uniform);\r\n      } else if (typeOfUniform === 'string') {\r\n\r\n        if (currentTextureUnit > maximumTextureUnits) {\r\n          console.error('texture exceed maximum texture units.');\r\n          continue;\r\n        }\r\n\r\n        let texture = cachedTextures[uniform];\r\n\r\n        if (!texture) {\r\n          texture = gl.createTexture();\r\n          gl.activeTexture(textureUnit);\r\n          gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\r\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255, 255]));\r\n          const image = new Image();\r\n          image.src = uniform;\r\n          image.addEventListener('load', () => {\r\n            gl.activeTexture(textureUnit);\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n          });\r\n\r\n          cachedTextures[uniform] = texture;\r\n        }\r\n\r\n        gl.activeTexture(textureUnit);\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.uniform1i(uniformLocation, currentTextureUnit);\r\n\r\n        currentTextureUnit++;\r\n      }\r\n    }\r\n  }\r\n\r\n  // draw\r\n  const hasBoundElementArrayBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\r\n  if (indices && indices.length > 0) {\r\n    const buffer = createIndicesBuffer(gl, indices, gl.STATIC_DRAW);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\r\n\r\n    const indicesType = getIndicesType(indices);\r\n    gl.drawElements(primitiveType, count, indicesType, 0);\r\n  } else if (hasBoundElementArrayBuffer) {\r\n    const indicesType = hasBoundElementArrayBuffer.indicesType;\r\n    gl.drawElements(primitiveType, count, indicesType, 0);\r\n  } else {\r\n    gl.drawArrays(primitiveType, 0, count);\r\n  }\r\n}\r\n\r\nexport default draw;\r\n","import createContext from './createContext.js';\r\nimport setState from './setState.js';\r\nimport getState from './getState.js';\r\nimport createFramebuffer from './createFramebuffer.js';\r\nimport createTexture from './createTexture.js';\r\nimport updateTexture from './updateTexture.js';\r\nimport createCubeMap from './createCubeMap.js';\r\nimport createVAO from './createVAO.js';\r\nimport clear from './clear.js';\r\nimport draw from './draw.js';\r\n\r\nconst ToyGL = {\r\n  createContext,\r\n  setState,\r\n  getState,\r\n  clear,\r\n  draw,\r\n  createTexture,\r\n  updateTexture,\r\n  createCubeMap,\r\n  createVAO,\r\n  createFramebuffer,\r\n};\r\n\r\nexport default ToyGL;\r\n","import WebGLConstant from './WebglConstant.js';\r\n\r\nexport default function getState(gl) {\r\n  // cull face-related state\r\n  const cullFaceEnabled = gl.getParameter(gl.CULL_FACE);\r\n  const cullFaceMode = gl.getParameter(gl.CULL_FACE_MODE);\r\n  \r\n  // stencil-related state\r\n  const depthTestEnabled = gl.getParameter(gl.DEPTH_TEST);\r\n  const depthClearValue = gl.getParameter(gl.DEPTH_CLEAR_VALUE);\r\n  const depthFunc = gl.getParameter(gl.DEPTH_FUNC);\r\n  const depthWritemask = gl.getParameter(gl.DEPTH_WRITEMASK);\r\n  const depthRange = gl.getParameter(gl.DEPTH_RANGE);\r\n  const depthBits = gl.getParameter(gl.DEPTH_BITS);\r\n\r\n  const stencilTestEnabled = gl.getParameter(gl.STENCIL_TEST);\r\n  const stencilClearValue = gl.getParameter(gl.STENCIL_CLEAR_VALUE);\r\n\r\n  const stencilRef = gl.getParameter(gl.STENCIL_REF);\r\n  const stencilFunc = gl.getParameter(gl.STENCIL_FUNC);\r\n  const stencilFail = gl.getParameter(gl.STENCIL_FAIL);\r\n  const stencilPassDepthFail = gl.getParameter(gl.STENCIL_PASS_DEPTH_FAIL);\r\n  const stencilPassDepthPass = gl.getParameter(gl.STENCIL_PASS_DEPTH_PASS);\r\n  const stencilValueMask = gl.getParameter(gl.STENCIL_VALUE_MASK);\r\n  const stencilWritemask = gl.getParameter(gl.STENCIL_WRITEMASK);\r\n\r\n  const stencilBackRef = gl.getParameter(gl.STENCIL_BACK_REF);\r\n  const stencilBackFunc = gl.getParameter(gl.STENCIL_BACK_FUNC);\r\n  // what action is taken for back-facing polygons when the stencil test fails. Initial value is KEEP\r\n  const stencilBackFail = gl.getParameter(gl.STENCIL_BACK_FAIL);\r\n  const stencilBackPassDepthFail = gl.getParameter(gl.STENCIL_BACK_PASS_DEPTH_FAIL);\r\n  const stencilBackPassDepthPass = gl.getParameter(gl.STENCIL_BACK_PASS_DEPTH_PASS);\r\n  const stencilBackValueMask = gl.getParameter(gl.STENCIL_BACK_VALUE_MASK);\r\n  const stencilBackWritemask = gl.getParameter(gl.STENCIL_BACK_WRITEMASK);\r\n\r\n  const stencilBits = gl.getParameter(gl.STENCIL_BITS);\r\n\r\n  // blend\r\n  const blendEnable = gl.getParameter(gl.BLEND);\r\n  // blendColor\r\n  const blendColor = gl.getParameter(gl.BLEND_COLOR);\r\n  // blendFuncSeparate\r\n  const blendDstRGB = gl.getParameter(gl.BLEND_DST_RGB);\r\n  const blendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\r\n  const blendSrcRGB = gl.getParameter(gl.BLEND_SRC_RGB);\r\n  const blendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\r\n  // blendEquationSeparate\r\n  const blendEquationRGB = gl.getParameter(gl.BLEND_EQUATION_RGB);\r\n  const blendEquationAlpha = gl.getParameter(gl.BLEND_EQUATION_ALPHA);\r\n\r\n  // viewport\r\n  const currentViewport = gl.getParameter(gl.VIEWPORT);\r\n  const maxViewportDims = gl.getParameter(gl.MAX_VIEWPORT_DIMS);\r\n\r\n  const scissorTestEnable = gl.getParameter(gl.SCISSOR_TEST);\r\n  const scissorBox = gl.getParameter(gl.SCISSOR_BOX);\r\n\r\n  // polygon offset fill\r\n  const polygonOffsetFillEnable = gl.getParameter(gl.POLYGON_OFFSET_FILL);\r\n  const polygonOffsetFactor = gl.getParameter(gl.POLYGON_OFFSET_FACTOR);\r\n  const polygonOffsetUnits = gl.getParameter(gl.POLYGON_OFFSET_UNITS);\r\n\r\n  const ditherEnable = gl.getParameter(gl.DITHER);\r\n\r\n  // \r\n  const redBits = gl.getParameter(gl.RED_BITS);\r\n  const greenBits = gl.getParameter(gl.GREEN_BITS);\r\n  const blueBits = gl.getParameter(gl.BLUE_BITS);\r\n  const alphaBits = gl.getParameter(gl.ALPHA_BITS);\r\n  const subpixelBits = gl.getParameter(gl.SUBPIXEL_BITS);\r\n\r\n  const aliasedLineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE);\r\n  const aliasedPointSizeRange = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\r\n\r\n  // color write mask\r\n  const colorWritemask = gl.getParameter(gl.COLOR_WRITEMASK);\r\n  const colorClearValue = gl.getParameter(gl.COLOR_CLEAR_VALUE);\r\n\r\n  // texture-related state\r\n  const activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);\r\n  // The maximum number of texture image units available to the fragment stage of the GL\r\n  const maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n  // Both the vertex shader and fragment processing combined cannot use more than MAX_COMBINED_TEXTURE_IMAGE_UNITS texture image units.\r\n  const maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n  const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n  const maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n  const maxRenderbuffereSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\r\n\r\n  // \r\n  const maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\r\n  // The maximum number of texture image units available to a vertex shader\r\n  const maxVertexTextureImageUnits = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\r\n  const maxVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\r\n  const maxVaryingVectors = gl.getParameter(gl.MAX_VARYING_VECTORS);\r\n\r\n  // gl.pixelStorei(pname, param)\r\n  const packAlignment = gl.getParameter(gl.PACK_ALIGNMENT);\r\n  const unpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\r\n  const unpackColorspaceConversionWebgl = gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL)\r\n  const unpackFlipYWebgl = gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);\r\n  const unpackPremultiplyAlphaWebgl = gl.getParameter(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL);\r\n\r\n  // \r\n  const vendor = gl.getParameter(gl.VENDOR); \r\n  const version = gl.getParameter(gl.VERSION); \r\n\r\n  // Uint32Array\r\n  const compressedTextureFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);\r\n\r\n  // binding\r\n  const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n  const arrayBufferBinding = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\r\n  const elementArrayBufferBinding = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\r\n  const framebufferBinding = gl.getParameter(gl.FRAMEBUFFER_BINDING);\r\n  const renderbufferBinding = gl.getParameter(gl.RENDERBUFFER_BINDING);\r\n  const textureBinding2D = gl.getParameter(gl.TEXTURE_BINDING_2D);\r\n  const textureBindingCubeMap = gl.getParameter(gl.TEXTURE_BINDING_CUBE_MAP);\r\n  const renderer = gl.getParameter(gl.RENDERER);\r\n\r\n  // sample coverage\r\n  const samples = gl.getParameter(gl.SAMPLES);\r\n  const sampleBuffers = gl.getParameter(gl.SAMPLE_BUFFERS);\r\n  const sampleAlphaToCoverage = gl.getParameter(gl.SAMPLE_ALPHA_TO_COVERAGE);\r\n  const sampleCoverageInvert = gl.getParameter(gl.SAMPLE_COVERAGE_INVERT);\r\n  const sampleConverageValue =  gl.getParameter(gl.SAMPLE_COVERAGE_VALUE);\r\n\r\n  const frontFaceOrder = gl.getParameter(gl.FRONT_FACE);\r\n\r\n  const lineWidth = gl.getParameter(gl.LINE_WIDTH);\r\n\r\n  const generateMipmapHint = gl.getParameter(gl.GENERATE_MIPMAP_HINT);\r\n\r\n  const shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n\r\n\r\n  return {\r\n    cullFace: {\r\n      CULL_FACE: cullFaceEnabled,\r\n      CULL_FACE_MODE: WebGLConstant[cullFaceMode],\r\n    },\r\n    depth: {\r\n      DEPTH_TEST: depthTestEnabled,\r\n      DEPTH_CLEAR_VALUE: depthClearValue,\r\n      DEPTH_FUNC: WebGLConstant[depthFunc],\r\n      DEPTH_WRITEMASK: depthWritemask,\r\n      DEPTH_RANGE: depthRange,\r\n      DEPTH_BITS: depthBits,\r\n    },\r\n    stencil: {\r\n      STENCIL_TEST: stencilTestEnabled,\r\n      STENCIL_CLEAR_VALUE: stencilClearValue,\r\n      STENCIL_BITS: stencilBits,\r\n      front: {\r\n        STENCIL_REF: stencilRef,\r\n        STENCIL_FUNC: WebGLConstant[stencilFunc],\r\n        STENCIL_FAIL: WebGLConstant[stencilFail],\r\n        STENCIL_PASS_DEPTH_FAIL: WebGLConstant[stencilPassDepthFail],\r\n        STENCIL_PASS_DEPTH_PASS: WebGLConstant[stencilPassDepthPass],\r\n        STENCIL_VALUE_MASK: Number(stencilValueMask).toString(16),\r\n        STENCIL_WRITEMASK: Number(stencilWritemask).toString(16),\r\n      },\r\n      back: {\r\n        STENCIL_BACK_REF: stencilBackRef,\r\n        STENCIL_BACK_FUNC: WebGLConstant[stencilBackFunc],\r\n        STENCIL_BACK_FAIL: WebGLConstant[stencilBackFail],\r\n        STENCIL_BACK_PASS_DEPTH_FAIL: WebGLConstant[stencilBackPassDepthFail],\r\n        STENCIL_BACK_PASS_DEPTH_PASS: WebGLConstant[stencilBackPassDepthPass],\r\n        STENCIL_BACK_VALUE_MASK: Number(stencilBackValueMask).toString(16),\r\n        STENCIL_BACK_WRITEMASK: Number(stencilBackWritemask).toString(16),  \r\n      },\r\n    },\r\n    blend: {\r\n      BLEND: blendEnable,\r\n      BLEND_COLOR: blendColor,\r\n      BLEND_DST_RGB: WebGLConstant[blendDstRGB],\r\n      BLEND_DST_ALPHA: WebGLConstant[blendDstAlpha],\r\n      BLEND_SRC_RGB: WebGLConstant[blendSrcRGB],\r\n      BLEND_SRC_ALPHA: WebGLConstant[blendSrcAlpha],\r\n      BLEND_EQUATION_RGB: WebGLConstant[blendEquationRGB],\r\n      BLEND_EQUATION_ALPHA: WebGLConstant[blendEquationAlpha],\r\n    },\r\n    viewport: {\r\n      VIEWPORT: currentViewport,\r\n      MAX_VIEWPORT_DIMS: maxViewportDims,\r\n    },\r\n    scissor: {\r\n      SCISSOR_TEST: scissorTestEnable,\r\n      SCISSOR_BOX: scissorBox,\r\n    },\r\n    polygonOffset: {\r\n      POLYGON_OFFSET_FILL: polygonOffsetFillEnable,\r\n      POLYGON_OFFSET_FACTOR: polygonOffsetFactor,\r\n      POLYGON_OFFSET_UNITS: polygonOffsetUnits,\r\n    },\r\n    DITHER: ditherEnable,\r\n\r\n    binding: {\r\n      ARRAY_BUFFER_BINDING: arrayBufferBinding,\r\n      ELEMENT_ARRAY_BUFFER_BINDING: elementArrayBufferBinding,\r\n      CURRENT_PROGRAM: currentProgram,\r\n      FRAMEBUFFER_BINDING: framebufferBinding,\r\n      RENDERBUFFER_BINDING: renderbufferBinding,\r\n      TEXTURE_BINDING_2D: textureBinding2D,\r\n      TEXTURE_BINDING_CUBE: textureBindingCubeMap,\r\n    },\r\n    RENDERER: renderer,\r\n\r\n    color: {\r\n      RED_BITS: redBits,\r\n      GREEN_BITS: greenBits,\r\n      BLUE_BITS: blueBits,\r\n      ALPHA_BITS: alphaBits,\r\n      SUBPIXEL_BITS: subpixelBits,\r\n      COLOR_CLEAR_VALUE: colorClearValue,\r\n      COLOR_WRITEMASK: colorWritemask,\r\n    },\r\n    aliasedRange: {\r\n      ALIASED_LINE_WIDTH_RANGE : aliasedLineWidthRange,\r\n      ALIASED_POINT_SIZE_RANGE: aliasedPointSizeRange,\r\n    },\r\n    texture: {\r\n      MAX_TEXTURE_IMAGE_UNITS: maxTextureImageUnits,\r\n      MAX_COMBINED_TEXTURE_IMAGE_UNITS: maxCombinedTextureImageUnits,\r\n      ACTIVE_TEXTURE: WebGLConstant[activeTexture],\r\n      MAX_TEXTURE_SIZE: maxTextureSize,\r\n      MAX_CUBE_MAP_TEXTURE_SIZE: maxCubeMapTextureSize,\r\n      MAX_RENDERBUFFER_SIZE: maxRenderbuffereSize,\r\n    },\r\n    COMPRESSED_TEXTURE_FORMATS: Array.from(compressedTextureFormats).map(format => WebGLConstant[format]),\r\n    // numCompressedTextureFormats,\r\n\r\n    GENERATE_MIPMAP_HINT: WebGLConstant[generateMipmapHint],\r\n    LINE_WIDTH: lineWidth,\r\n    FRONT_FACE: WebGLConstant[frontFaceOrder],\r\n\r\n    SHADING_LANGUAGE_VERSION: shadingLanguageVersion,\r\n    vertex: {\r\n      MAX_VERTEX_ATTRIBS: maxVertexAttribs,\r\n      MAX_VERTEX_TEXTURE_IMAGE_UNITS: maxVertexTextureImageUnits,\r\n      MAX_VERTEX_UNIFORM_VECTORS: maxVertexUniformVectors,\r\n      MAX_VARYING_VECTORS: maxVaryingVectors\r\n    },\r\n    sample: {\r\n      SAMPLES: samples,\r\n      SAMPLE_BUFFERS: sampleBuffers,\r\n      SAMPLE_ALPHA_TO_COVERAGE: sampleAlphaToCoverage,\r\n      SAMPLE_COVERAGE_VALUE: sampleConverageValue,\r\n      SAMPLE_COVERAGE_INVERT: sampleCoverageInvert\r\n    },\r\n    unpack: {\r\n      PACK_ALIGNMENT: packAlignment,\r\n      UNPACK_ALIGNMENT: unpackAlignment,\r\n      UNPACK_FLIP_Y_WEBGL: unpackFlipYWebgl,\r\n      UNPACK_PREMULTIPLY_ALPHA_WEBGL: unpackPremultiplyAlphaWebgl,\r\n      UNPACK_COLORSPACE_CONVERSION_WEBGL: WebGLConstant[unpackColorspaceConversionWebgl],\r\n    },\r\n    VENDOR: vendor,\r\n    VERSION: version,\r\n  };\r\n}\r\n","import defined from './defined.js';\r\nimport defaultValue from './defaultValue.js';\r\n\r\n/**\r\n * Execute a clear command.\r\n * @param {WebGLRenderingContext} gl \r\n * @param {Object} [options] \r\n * @param {Array} [options.color] \r\n * @param {Number} [options.depth] \r\n * @param {Number} [options.stencil] \r\n * @param {WebGLFramebuffer} [options.fb] \r\n */\r\nfunction clear(gl, options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const { fb, color, depth, stencil } = options;\r\n\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\r\n\r\n  let mask = 0;\r\n  if (color) {\r\n    gl.clearColor(color[0], color[1], color[2], color[3]);\r\n    mask |= gl.COLOR_BUFFER_BIT;\r\n  }\r\n  if (defined(depth)) {\r\n    gl.clearDepth(depth);\r\n    mask |= gl.DEPTH_BUFFER_BIT;\r\n  }\r\n  if (stencil) {\r\n    gl.clearStencil(stencil);\r\n    mask |= gl.STENCIL_BUFFER_BIT;\r\n  }\r\n\r\n  if (mask !== 0) {\r\n    gl.clear(mask);\r\n  }\r\n}\r\n\r\nexport default clear;\r\n","// see https://stackoverflow.com/questions/24048547/checking-if-an-object-is-array-like\r\nfunction isArrayLike(item) {\r\n  return (\r\n    Array.isArray(item) || \r\n    (!!item &&\r\n      typeof item === \"object\" &&\r\n      typeof (item.length) === \"number\" && \r\n      (item.length === 0 ||\r\n        (item.length > 0 && \r\n        (item.length - 1) in item)\r\n      )\r\n    )\r\n  );\r\n}\r\n\r\nexport default isArrayLike;\r\n","import isPowerOfTwo from './isPowerOfTwo.js';\r\nimport defined from './defined.js';\r\nimport defaultValue from './defaultValue.js';\r\n\r\n/**\r\n * Create a WebGLTexture.\r\n * @memberof ToyGL\r\n * @param {WebGLRenderingContext} gl \r\n * @param {Object} options \r\n * @param {Array.<ArrayBufferView | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement>} options.levels all levels data\r\n * @param {ArrayBufferView | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} options.data level 0 data\r\n * @param {Number} options.width\r\n * @param {Number} options.height\r\n * @param {Number} [options.depth=1]\r\n * @param {Number} options.internalFormat For WebGL1, internal format must same with format.\r\n * @param {Number} options.format\r\n * @param {Number} options.type Texel data type, such as <code>gl.UNSIGNED_BYTE</code>, <code>gl.FLOAT</code>, <code>gl.UNSIGNED_INT</code>.\r\n * @param {Number} [options.target=TEXTURE_2D]\r\n * @param {Boolean} [options.generateMipmap=false]\r\n * @param {Number} [options.wrapS=CLAMP_TO_EDGE]\r\n * @param {Number} [options.wrapT=CLAMP_TO_EDGE]\r\n * @param {Number} [options.wrapR=CLAMP_TO_EDGE]\r\n * @param {Number} [options.minFilter=LINEAR]\r\n * @param {Number} [options.magFilter=LINEAR]\r\n * @param {Number} [options.flipY=false] Only valid for DOM-Element uploads\r\n * @param {Number} [options.premultiplyAlpha=false] Only valid for DOM-Element uploads\r\n * @returns {WebGLTexture}\r\n */\r\nfunction createTexture(gl, options) {\r\n  const { internalFormat, type, format, width, height, data, generateMipmap } = options;\r\n\r\n  const depth = defaultValue(options.depth, 1);\r\n  const wrapS = defaultValue(options.wrapS, gl.CLAMP_TO_EDGE);\r\n  const wrapT = defaultValue(options.wrapT, gl.CLAMP_TO_EDGE);\r\n  const wrapR = defaultValue(options.wrapR, gl.CLAMP_TO_EDGE);\r\n  const minFilter = defaultValue(options.minFilter, gl.LINEAR);\r\n  const magFilter = defaultValue(options.magFilter, gl.LINEAR);\r\n\r\n  let levels = options.levels;\r\n  if (!levels) {\r\n    levels = [ data ];\r\n  }\r\n\r\n  const flipY = defaultValue(options.flipY, false);\r\n  const premultiplyAlpha = defaultValue(options.premultiplyAlpha, false);\r\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\r\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);\r\n\r\n  const texture = gl.createTexture();\r\n  const textureTarget = defaultValue(options.target, gl.TEXTURE_2D);\r\n\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  gl.bindTexture(textureTarget, texture);\r\n\r\n\r\n  if (type === gl.FLOAT) {\r\n    if (gl instanceof WebGLRenderingContext && !gl._textureFloat) {\r\n      console.warn('Do not support float texture.');\r\n    }\r\n\r\n    if ((minFilter === gl.LINEAR ||\r\n      minFilter === gl.LINEAR_MIPMAP_NEAREST ||\r\n      minFilter === gl.NEAREST_MIPMAP_LINEAR ||\r\n      minFilter === gl.LINEAR_MIPMAP_LINEAR) && !gl._textureFloatLinear\r\n    ) {\r\n      console.warn('Do not support float texture linear filter.');\r\n    }\r\n  }\r\n\r\n  const numberOfLevels = levels.length;\r\n  for (let level = 0; level < numberOfLevels; level++) {\r\n    const levelData = levels[level];\r\n\r\n    if (\r\n      levelData instanceof HTMLImageElement ||\r\n      levelData instanceof HTMLCanvasElement ||\r\n      levelData instanceof HTMLVideoElement\r\n    ) {\r\n      if (textureTarget === gl.TEXTURE_2D) {\r\n        gl.texImage2D(gl.TEXTURE_2D, level, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, levelData);\r\n      } else if (textureTarget === gl.TEXTURE_3D) {\r\n        // TODO:\r\n      }\r\n\r\n    } else {\r\n      const border = 0;\r\n      if (textureTarget === gl.TEXTURE_2D) {\r\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, levelData);\r\n      } else if (textureTarget === gl.TEXTURE_3D) {\r\n        gl.texImage3D(gl.TEXTURE_3D, level, internalFormat, width, height, depth, border, format, type, levelData);\r\n        gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_R, wrapR);\r\n      }\r\n    }\r\n  }\r\n\r\n  gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_S, wrapS);\r\n  gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_T, wrapT);\r\n  gl.texParameteri(textureTarget, gl.TEXTURE_MIN_FILTER, minFilter);\r\n  gl.texParameteri(textureTarget, gl.TEXTURE_MAG_FILTER, magFilter);\r\n\r\n  if (generateMipmap === true) {\r\n    if ((isPowerOfTwo(width) && isPowerOfTwo(height)) || gl instanceof WebGL2RenderingContext) {\r\n      gl.generateMipmap(textureTarget);\r\n    } else {\r\n      console.warn('createTexture: texture size is NOT power of two, current is ' + width + 'x' + height + '.');\r\n    }\r\n  }\r\n\r\n  gl.bindTexture(textureTarget, null);\r\n\r\n  return texture;\r\n}\r\n\r\nexport default createTexture;\r\n","import defaultValue from \"./defaultValue\";\r\n\r\n/**\r\n * Update texture data.\r\n * @param {WebGLRenderingContext} gl \r\n * @param {WebGLTexture} texture \r\n * @param {Object | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} source \r\n * @param {Number} source.width \r\n * @param {Number} source.height \r\n * @param {TypedArray} source.arrayBufferView \r\n * @param {Number} [source.level=0] \r\n * @param {Number} [source.internalFormat=gl.RGBA] \r\n * @param {Number} [source.format=gl.RGBA] \r\n * @param {Number} [source.type=gl.UNSIGNED_BYTE] \r\n * @returns {WebGLTexture}\r\n */\r\nfunction updateTexture(gl, texture, source) {\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n  if (source instanceof HTMLImageElement ||\r\n    source instanceof HTMLCanvasElement ||\r\n    source instanceof HTMLVideoElement) {\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, videoElem);\r\n  } else {\r\n\r\n    const { width, height, arrayBufferView } = source;\r\n    const level = defaultValue(source.level, 0);\r\n    const internalFormat = defaultValue(source.internalFormat, gl.RGBA);\r\n    const format = defaultValue(source.format, gl.RGBA);\r\n    const type = defaultValue(source.internalFormat, gl.UNSIGNED_BYTE);\r\n    const border = 0;\r\n\r\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, arrayBufferView);\r\n  }\r\n\r\n  gl.bindTexture(gl.TEXTURE_2D, null);\r\n  return texture;\r\n}\r\n\r\nexport default updateTexture;\r\n","import defaultValue from './defaultValue.js';\r\n\r\nfunction createCubeMap(gl, options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const level = defaultValue(options.level, 0);\r\n  const data = options.data;\r\n  const width = options.width;\r\n  const height = options.height;\r\n  const format = defaultValue(options.format, gl.RGBA);\r\n  const type = defaultValue(options.type, gl.UNSIGNED_BYTE);\r\n  const internalFormat = defaultValue(options.internalFormat, gl.RGBA);\r\n\r\n  const texture = gl.createTexture();\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\r\n\r\n  const faces = [\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_POSITIVE_X,\r\n      data: data.px,\r\n    },\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\r\n      data: data.nx,\r\n    },\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\r\n      data: data.py,\r\n    },\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\r\n      data: data.ny,\r\n    },\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\r\n      data: data.pz,\r\n    },\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\r\n      data: data.nz,\r\n    },\r\n  ]\r\n  \r\n  for (let i = 0; i < 6; i++) {\r\n    const face = faces[i];\r\n    const target = face.target;\r\n    const bufferView = face.data;\r\n    if (bufferView instanceof HTMLImageElement) {\r\n      gl.texImage2D(target, level, internalFormat, format, type, bufferView);\r\n    } else {\r\n      gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, bufferView);\r\n    }\r\n\r\n    // default texture settings\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n  }\r\n\r\n  gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\r\n\r\n  return texture;\r\n}\r\n\r\nexport default createCubeMap;\r\n"],"names":["defaultValue","a","b","EMPTY_OBJECT","Object","freeze","global","window","defined","validateStencilOp","op","toUpperCase","validateGLConstantDefination","gl","constantName","constant","Error","applyStencilStateSeparate","face","state","writeMask","stencilMaskSeparate","func","ref","valueMask","validateStencilFunc","stencilFuncSeparate","fail","zfail","zpass","stencilOpSeparate","WebGLConstant","34016","33984","33985","33986","33987","33988","33989","33990","33991","33992","33993","33994","33995","33996","33997","33998","33999","34000","34001","34002","34003","34004","34005","34006","34007","34008","34009","34010","34011","34012","34013","34014","34015","3410","3411","3412","3413","2884","2885","1028","1029","1032","512","513","514","515","516","517","518","519","0","1","5386","7680","7681","7682","7683","34055","34056","32774","32778","32779","768","770","774","772","32769","32771","769","771","775","773","32770","32772","2304","2305","4352","4353","4354","33776","33777","33778","33779","36492","36493","36494","36495","36283","36284","36285","36286","37444","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","FRAMEBUFFER_STATUS","36053","36054","36055","36057","36061","isPowerOfTwo","value","cachedBuffer","getIndicesType","indices","indicesType","max","i","length","Math","WebglConstant","createBuffer","bufferTarget","source","usage","buffer","bindBuffer","bufferData","createAttributeBuffer","typedArrayOrArray","bufferKey","element","toFixed","typedArray","STATIC_DRAW","Array","isArray","Float32Array","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","ARRAY_BUFFER","createIndicesBuffer","toString","getExtension","ELEMENT_ARRAY_BUFFER","createVAO","options","createVertexArray","oldVao","getParameter","VERTEX_ARRAY_BINDING","vao","bindVertexArray","attributes","attributeName","hasOwnProperty","call","location","data","size","enableVertexAttribArray","type","normalized","stride","offset","vertexAttribPointer","indicesBuffer","cachedProgram","cachedTextures","getNumberOfComponentsByType","numberOfComponents","getAttributeSize","activeAttribute","name","vaoCache","ToyGL","createContext","contextOptions","canvas","document","createElement","style","width","height","setProperty","innerWidth","innerHeight","requireWebgl2","getContext","extVAO","createVertexArrayOES","bind","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","isVertexArray","isVertexArrayOES","VERTEX_ARRAY_BINDING_OES","drawArraysInstanced","extInstancedArrays","drawArraysInstancedANGLE","drawElementsInstanced","drawElementsInstancedANGLE","vertexAttribDivisor","vertexAttribDivisorANGLE","VERTEX_ATTRIB_ARRAY_DIVISOR","VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE","drawBuffers","extDrawBuffers","drawBuffersWEBGL","MAX_COLOR_ATTACHMENTS","MAX_COLOR_ATTACHMENTS_WEBGL","MAX_DRAW_BUFFERS","MAX_DRAW_BUFFERS_WEBGL","MAX_TEXTURE_MAX_ANISOTROPY","extTextureFilterAnisotropic","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY","TEXTURE_MAX_ANISOTROPY_EXT","MIN","extBlendMinmax","MIN_EXT","MAX","MAX_EXT","FRAGMENT_SHADER_DERIVATIVE_HINT","extStandardDerivatives","FRAGMENT_SHADER_DERIVATIVE_HINT_OES","UNSIGNED_INT_24_8","extDepthTexture","UNSIGNED_INT_24_8_WEBGL","HALF_FLOAT","extTextureHalfFloat","HALF_FLOAT_OES","extS3tc","extPvrtc","extAstc","extEtc","extEtc1","extBc7","extDebugShaders","_elementIndexUint","_fragDepth","_textureFloat","_textureFloatLinear","_colorBufferFloat","_colorBufferHalfFloat","_floatBlend","_shaderTextureLod","setState","depthTest","stencilTest","colorMask","cull","blend","viewport","scissor","polygonOffset","sampleCoverage","dither","enable","CULL_FACE","disable","cullFace","frontFace","DEPTH_TEST","depthFunc","write","depthMask","STENCIL_TEST","front","back","FRONT","BACK","BLEND","blendColor","blendEquationSeparate","rgb","alpha","RGB","ALPHA","glRGB","glALPHA","blendEquation","equationName","equation","blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","SRCRGB","DSTRGB","SRCALPHA","DSTALPHA","glSrcRGB","glDstRGB","glSrcAlpha","glDstAlpha","blendFunc","srcFuncName","dstFuncName","src","dst","SCISSOR_TEST","rect","POLYGON_OFFSET_FILL","console","warn","factor","units","alphaToCoverage","invert","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_COVERAGE","DITHER","getState","cullFaceEnabled","cullFaceMode","CULL_FACE_MODE","depthTestEnabled","depthClearValue","DEPTH_CLEAR_VALUE","DEPTH_FUNC","depthWritemask","DEPTH_WRITEMASK","depthRange","DEPTH_RANGE","depthBits","DEPTH_BITS","stencilTestEnabled","stencilClearValue","STENCIL_CLEAR_VALUE","stencilRef","STENCIL_REF","stencilFunc","STENCIL_FUNC","stencilFail","STENCIL_FAIL","stencilPassDepthFail","STENCIL_PASS_DEPTH_FAIL","stencilPassDepthPass","STENCIL_PASS_DEPTH_PASS","stencilValueMask","STENCIL_VALUE_MASK","stencilWritemask","STENCIL_WRITEMASK","stencilBackRef","STENCIL_BACK_REF","stencilBackFunc","STENCIL_BACK_FUNC","stencilBackFail","STENCIL_BACK_FAIL","stencilBackPassDepthFail","STENCIL_BACK_PASS_DEPTH_FAIL","stencilBackPassDepthPass","STENCIL_BACK_PASS_DEPTH_PASS","stencilBackValueMask","STENCIL_BACK_VALUE_MASK","stencilBackWritemask","STENCIL_BACK_WRITEMASK","stencilBits","STENCIL_BITS","blendEnable","BLEND_COLOR","blendDstRGB","BLEND_DST_RGB","blendDstAlpha","BLEND_DST_ALPHA","blendSrcRGB","BLEND_SRC_RGB","blendSrcAlpha","BLEND_SRC_ALPHA","blendEquationRGB","BLEND_EQUATION_RGB","blendEquationAlpha","BLEND_EQUATION_ALPHA","currentViewport","VIEWPORT","maxViewportDims","MAX_VIEWPORT_DIMS","scissorTestEnable","scissorBox","SCISSOR_BOX","polygonOffsetFillEnable","polygonOffsetFactor","POLYGON_OFFSET_FACTOR","polygonOffsetUnits","POLYGON_OFFSET_UNITS","ditherEnable","redBits","RED_BITS","greenBits","GREEN_BITS","blueBits","BLUE_BITS","alphaBits","ALPHA_BITS","subpixelBits","SUBPIXEL_BITS","aliasedLineWidthRange","ALIASED_LINE_WIDTH_RANGE","aliasedPointSizeRange","ALIASED_POINT_SIZE_RANGE","colorWritemask","COLOR_WRITEMASK","colorClearValue","COLOR_CLEAR_VALUE","activeTexture","ACTIVE_TEXTURE","maxTextureImageUnits","MAX_TEXTURE_IMAGE_UNITS","maxCombinedTextureImageUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubeMapTextureSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxRenderbuffereSize","MAX_RENDERBUFFER_SIZE","maxVertexAttribs","MAX_VERTEX_ATTRIBS","maxVertexTextureImageUnits","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxVertexUniformVectors","MAX_VERTEX_UNIFORM_VECTORS","maxVaryingVectors","MAX_VARYING_VECTORS","packAlignment","PACK_ALIGNMENT","unpackAlignment","UNPACK_ALIGNMENT","unpackColorspaceConversionWebgl","UNPACK_COLORSPACE_CONVERSION_WEBGL","unpackFlipYWebgl","UNPACK_FLIP_Y_WEBGL","unpackPremultiplyAlphaWebgl","UNPACK_PREMULTIPLY_ALPHA_WEBGL","vendor","VENDOR","version","VERSION","compressedTextureFormats","COMPRESSED_TEXTURE_FORMATS","currentProgram","CURRENT_PROGRAM","arrayBufferBinding","ARRAY_BUFFER_BINDING","elementArrayBufferBinding","ELEMENT_ARRAY_BUFFER_BINDING","framebufferBinding","FRAMEBUFFER_BINDING","renderbufferBinding","RENDERBUFFER_BINDING","textureBinding2D","TEXTURE_BINDING_2D","textureBindingCubeMap","TEXTURE_BINDING_CUBE_MAP","renderer","RENDERER","samples","SAMPLES","sampleBuffers","SAMPLE_BUFFERS","sampleAlphaToCoverage","sampleCoverageInvert","SAMPLE_COVERAGE_INVERT","sampleConverageValue","SAMPLE_COVERAGE_VALUE","frontFaceOrder","FRONT_FACE","lineWidth","LINE_WIDTH","generateMipmapHint","GENERATE_MIPMAP_HINT","shadingLanguageVersion","SHADING_LANGUAGE_VERSION","depth","stencil","Number","binding","TEXTURE_BINDING_CUBE","color","aliasedRange","texture","from","map","format","vertex","sample","unpack","clear","fb","bindFramebuffer","FRAMEBUFFER","mask","clearColor","COLOR_BUFFER_BIT","clearDepth","DEPTH_BUFFER_BIT","clearStencil","STENCIL_BUFFER_BIT","draw","vs","vsSource","fs","fsSource","attributeLocations","count","primitiveType","TRIANGLES","uniforms","key","program","vertexShaderSource","fragmentShaderSource","createShader","VERTEX_SHADER","shaderSource","compileShader","FRAGMENT_SHADER","createProgram","attachShader","deleteShader","bindAttribLocation","linkProgram","log","getProgramParameter","LINK_STATUS","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","error","getProgramInfoLog","useProgram","numberOfAttributes","ACTIVE_ATTRIBUTES","vaoKey","getVaoKey","vaoAttributes","getActiveAttrib","attribute","attribLocation","getAttribLocation","numberOfUniforms","ACTIVE_UNIFORMS","maximumTextureUnits","currentTextureUnit","activeUniform","getActiveUniform","uniformName","isUniformArray","indexOfBracket","indexOf","slice","uniform","uniformLocation","getUniformLocation","typeOfUniform","textureUnit","TEXTURE0","WebGLTexture","SAMPLER_2D","bindTexture","TEXTURE_2D","SAMPLER_3D","TEXTURE_3D","SAMPLER_CUBE","TEXTURE_CUBE_MAP","uniform1i","item","order","floor","sqrt","transpose","uniform1f","BOOL","createTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","texImage2D","RGBA","image","Image","addEventListener","hasBoundElementArrayBuffer","drawElements","drawArrays","internalFormat","generateMipmap","wrapS","wrapT","wrapR","minFilter","magFilter","levels","flipY","premultiplyAlpha","pixelStorei","textureTarget","target","WebGLRenderingContext","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","numberOfLevels","level","levelData","HTMLImageElement","HTMLCanvasElement","HTMLVideoElement","border","texImage3D","TEXTURE_WRAP_R","WebGL2RenderingContext","updateTexture","videoElem","arrayBufferView","createCubeMap","faces","TEXTURE_CUBE_MAP_POSITIVE_X","px","TEXTURE_CUBE_MAP_NEGATIVE_X","nx","TEXTURE_CUBE_MAP_POSITIVE_Y","py","TEXTURE_CUBE_MAP_NEGATIVE_Y","ny","TEXTURE_CUBE_MAP_POSITIVE_Z","pz","TEXTURE_CUBE_MAP_NEGATIVE_Z","nz","bufferView","createFramebuffer","colorTexture","depthTexture","depthRenderbuffer","colorAttachments","colorAttachmentsLength","ext","push","COLOR_ATTACHMENT0_WEBGL","colorAttachment","framebufferTexture2D","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","renderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE"],"mappings":"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"}