{"version":3,"file":"toygl.min.js","sources":["../src/defined.js","../src/glUtils.js","../src/defaultValue.js","../src/createContext.js","../src/setState.js","../src/WebglConstant.js","../src/createFramebuffer.js","../src/isPowerOfTwo.js","../src/buffer.js","../src/draw.js","../src/index.js","../src/getState.js","../src/clear.js","../src/isArrayLike.js","../src/createTexture.js","../src/updateTexture.js","../src/createCubeMap.js","../src/createVAO.js"],"sourcesContent":["function defined(a) {\r\n  return a !== null && a !== undefined;\r\n}\r\n\r\nexport default defined;\r\n","import defined from \"./defined\";\r\n\r\nconst global = window;\r\n\r\n/**\r\n * Create a program and/or bind attribute location.\r\n * @param {WebGLRenderingContext} gl \r\n * @param {String} vertexShaderSource \r\n * @param {String} fragmentShaderSource \r\n * @param {Object} attributeLocations { [attributeName]: location }\r\n * @returns \r\n */\r\nfunction createProgram(gl, vertexShaderSource, fragmentShaderSource, attributeLocations) {\r\n  const vs = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vs, vertexShaderSource);\r\n  gl.compileShader(vs);\r\n  \r\n  const fs = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fs, fragmentShaderSource);\r\n  gl.compileShader(fs);\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vs);\r\n  gl.attachShader(program, fs);\r\n\r\n  gl.deleteShader(vs);\r\n  gl.deleteShader(fs);\r\n\r\n  // bind attribute location\r\n  if (defined(attributeLocations)) {\r\n    for (const attributeName in attributeLocations) {\r\n      if (Object.hasOwnProperty.call(attributeLocations, attributeName)) {\r\n        const location = attributeLocations[attributeName];\r\n        gl.bindAttribLocation(program, location, attributeName);\r\n      }\r\n    }\r\n  }\r\n\r\n  gl.linkProgram(program);\r\n\r\n  let log = '';\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\r\n      log = gl.getShaderInfoLog(fs);\r\n      console.error('Fragment shader failed to compiled: ' + log);\r\n    }\r\n\r\n    if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\r\n      log = gl.getShaderInfoLog(vs);\r\n      console.error('Vertex shader failed to compiled: ' + log);\r\n    }\r\n\r\n    log = gl.getProgramInfoLog(program);\r\n    console.error('Shader program link log: ' + log);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\nfunction setCanvasToDisplaySize(canvas) {\r\n  const dpr = global.devicePixelRatio;\r\n  const displayWidth = Math.round(canvas.clientWidth * dpr);\r\n  const displayHeight = Math.round(canvas.clientHeight * dpr);\r\n\r\n  const needResize = canvas.width !== displayWidth ||\r\n                     canvas.height !== displayHeight;\r\n\r\n  if (needResize) {\r\n    canvas.width = displayWidth;\r\n    canvas.height = displayHeight;\r\n  }\r\n}\r\n\r\nfunction validateStencilFunc(func) {\r\n  func = func.toUpperCase();\r\n  if (func === 'NEVER' ||\r\n    func === 'ALWAYS' ||\r\n    func === 'LESS' ||\r\n    func === 'LEQUAL' ||\r\n    func === 'NOTEQUAL' ||\r\n    func === 'EQUAL' ||\r\n    func === 'GREATER' ||\r\n    func === 'GEQUAL'\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction validateStencilOp(op) {\r\n  op = op.toUpperCase();\r\n  if (op === 'KEEP' ||\r\n    op === 'ZERO' ||\r\n    op === 'REPLACE' ||\r\n    op === 'INCR' ||\r\n    op === 'DECR' ||\r\n    op === 'INVERT' ||\r\n    op === 'INCR_WRAP' ||\r\n    op === 'DECR_WRAP'\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction validateGLConstantDefination(gl, constantName) {\r\n  const constant = gl[constantName];\r\n  if (!defined(constant)) {\r\n    throw new Error('gl.' + constantName + ' is not defined.');\r\n  }\r\n  return constant;\r\n}\r\n\r\nexport {\r\n  validateGLConstantDefination,\r\n  validateStencilFunc,\r\n  validateStencilOp,\r\n  createProgram,\r\n  setCanvasToDisplaySize,\r\n};\r\n","function defaultValue(a, b) {\r\n  if (a === null || a === undefined) {\r\n    return b;\r\n  }\r\n  return a;\r\n}\r\n\r\ndefaultValue.EMPTY_OBJECT = Object.freeze({});\r\n\r\nexport default defaultValue;\r\n","import { setCanvasToDisplaySize } from \"./glUtils.js\";\r\nimport defaultValue from './defaultValue.js';\r\n\r\nconst global = window;\r\n\r\n/**\r\n * Create an instance of WebGLRenderingContext or WebGL2RenderingContext.\r\n * @param {Object} contextOptions \r\n * @param {Boolean} contextOptions.alpha \r\n * @param {Boolean} contextOptions.depth \r\n * @param {Boolean} contextOptions.stencil \r\n * @param {Boolean} contextOptions.antialias \r\n * @param {Boolean} contextOptions.preserveDrawingBuffer \r\n * @param {Boolean} contextOptions.premultipliedAlpha \r\n * @param {Boolean} contextOptions.requireWebgl2 \r\n * @param {HTMLCanvasElement} contextOptions.canvas \r\n * @returns \r\n */\r\nfunction createContext(contextOptions) {\r\n  contextOptions = defaultValue(contextOptions, defaultValue.EMPTY_OBJECT);\r\n\r\n  let canvas = contextOptions.canvas;\r\n  if (!canvas) {\r\n    canvas = global.document.createElement('canvas');\r\n    canvas.style.width = '100vw';\r\n    canvas.style.height = '100vh';\r\n    canvas.style.setProperty('display', 'block');\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n  }\r\n\r\n  let gl;\r\n  if (contextOptions.requireWebgl2) {\r\n    gl = canvas.getContext('webgl2', contextOptions);\r\n  } else {\r\n    gl = canvas.getContext('webgl', contextOptions);\r\n  }\r\n\r\n  return gl;\r\n};\r\n\r\nexport default createContext;\r\n","import defined from './defined.js';\r\nimport {\r\n  validateGLConstantDefination,\r\n  validateStencilFunc,\r\n  validateStencilOp,\r\n} from \"./glUtils.js\";\r\n\r\nfunction applyStencilStateSeparate(gl, face, state) {\r\n  if (defined(state.writeMask)) {\r\n    gl.stencilMaskSeparate(face, state.writeMask);\r\n  }\r\n\r\n  if (defined(state.func) &&\r\n    defined(state.ref) &&\r\n    defined(state.valueMask)\r\n  ) {\r\n    if (validateStencilFunc(state.func) === false) {\r\n      throw new Error('setState: stencil func is invalid, current is ' + state.func + '!');\r\n    }\r\n    const func = state.func.toUpperCase();\r\n    gl.stencilFuncSeparate(face, gl[func], state.ref, state.valueMask);\r\n  }\r\n\r\n  if (defined(state.fail) &&\r\n    defined(state.zfail) &&\r\n    defined(state.zpass)\r\n  ) {\r\n    if (validateStencilOp(state.fail) === false ||\r\n      validateStencilOp(state.zfail) === false ||\r\n      validateStencilOp(state.zpass) === false\r\n    ) {\r\n      throw new Error('setState: stencil op is invalid, current is ' + state.fail + ', ' + state.zfail + ', ' + state.zpass + '!');\r\n    }\r\n    const fail = state.fail.toUpperCase();\r\n    const zfail = state.zfail.toUpperCase();\r\n    const zpass = state.zpass.toUpperCase();\r\n    gl.stencilOpSeparate(face, gl[fail], gl[zfail], gl[zpass]);\r\n  }\r\n}\r\n\r\nexport default function setState(gl, state) {\r\n  const { depthTest, stencilTest, colorMask, cull, blend, viewport, scissor, polygonOffset, sampleCoverage, dither } = state;\r\n\r\n  if (cull) {\r\n    if (cull.enable) {\r\n      gl.enable(gl.CULL_FACE);\r\n    } else {\r\n      gl.disable(gl.CULL_FACE);\r\n    }\r\n\r\n    const face = cull.face && cull.face.toUpperCase();\r\n    if (face === 'BACK' || face === 'FRONT' || face === 'FRONT_AND_BACK') {\r\n      gl.cullFace(gl[face]);\r\n    }\r\n\r\n    let frontFace = defined(cull.frontFace) && cull.frontFace.toUpperCase();\r\n    if (frontFace === 'CCW' || frontFace === 'CW') {\r\n      gl.frontFace(gl[frontFace]);\r\n    }\r\n  }\r\n\r\n  if (depthTest) {\r\n    if (depthTest.enable === true) {\r\n      gl.enable(gl.DEPTH_TEST);\r\n    } else if (depthTest.enable === false) {\r\n      gl.disable(gl.DEPTH_TEST);\r\n    }\r\n\r\n    if (depthTest.func) {\r\n      const func = depthTest.func.toUpperCase();\r\n      gl.depthFunc(gl[func]);\r\n    }\r\n\r\n    if (depthTest.write === true) {\r\n      gl.depthMask(true);\r\n    } else if (depthTest.write === false) {\r\n      gl.depthMask(false);\r\n    }\r\n  }\r\n\r\n  if (stencilTest) {\r\n    if (stencilTest.enable === true) {\r\n      gl.enable(gl.STENCIL_TEST);\r\n    } else if (stencilTest.enable === false) {\r\n      gl.disable(gl.STENCIL_TEST);\r\n    }\r\n\r\n    // pass = (ref & readMask) func (stencilValue & redMask)\r\n    // If the stencil test fails, the incoming fragment is discarded\r\n    // if (!pass)\r\n         // update stencilValue\r\n    //   stencilValue = failOp(ref, stencilValue) & writeMask\r\n    // else if zfail\r\n    //   zfailOp\r\n    // else if zpass\r\n    //   zpassOp \r\n    const { front, back } = stencilTest;\r\n    if (front) {\r\n      applyStencilStateSeparate(gl, gl.FRONT, front);\r\n    }\r\n    if (back) {\r\n      applyStencilStateSeparate(gl, gl.BACK, back);\r\n    }\r\n  }\r\n\r\n  if (colorMask) {\r\n    gl.colorMask(colorMask[0], colorMask[1], colorMask[2], colorMask[3]);\r\n  }\r\n\r\n  if (blend) {\r\n    if (blend.enable === true) {\r\n      gl.enable(gl.BLEND)\r\n    } else if (blend.enable === false) {\r\n      gl.disable(gl.BLEND)\r\n    }\r\n\r\n    if (blend.blendColor) {\r\n      gl.blendColor(...blend.blendColor);\r\n    }\r\n\r\n    if (blend.blendEquationSeparate) {\r\n      const { rgb, alpha } = blend.blendEquationSeparate;\r\n      if (!defined(rgb) || !defined(alpha)) {\r\n        throw new Error('To use blendEquationSeparate you MUST specify rgb and alpha.');\r\n      }\r\n      const RGB = rgb.toUpperCase();\r\n      const ALPHA = alpha.toUpperCase();\r\n\r\n      const glRGB = gl[RGB];\r\n      const glALPHA = gl[ALPHA];\r\n      if (!defined(glRGB)) {\r\n        throw new Error('gl.' + RGB + ' is undefined.');\r\n      }\r\n      if (!defined(glALPHA)) {\r\n        throw new Error('gl.' + ALPHA + ' is undefined.');\r\n      }\r\n\r\n      gl.blendEquationSeparate(glRGB, glALPHA);\r\n    } else if (blend.blendEquation) {\r\n      const equationName = blend.blendEquation.toUpperCase();\r\n      const equation = gl[equationName];\r\n      if (!defined(equation)) {\r\n        throw new Error(equationName + ' is invalid.');\r\n      }\r\n\r\n      gl.blendEquation(equation);\r\n    }\r\n\r\n    const blendFuncSeparate = blend.blendFuncSeparate;\r\n    if (defined(blendFuncSeparate)) {\r\n      const { srcRGB, dstRGB, srcAlpha, dstAlpha } = blendFuncSeparate;\r\n      if (!defined(srcRGB)) {\r\n        throw new Error('To use blendFuncSeparate you MUST specify srcRGB property.');\r\n      }\r\n      if (!defined(dstRGB)) {\r\n        throw new Error('To use blendFuncSeparate you MUST specify dstRGB property.');\r\n      }\r\n      if (!defined(srcAlpha)) {\r\n        throw new Error('To use blendFuncSeparate you MUST specify srcAlpha property.');\r\n      }\r\n      if (!defined(dstAlpha)) {\r\n        throw new Error('To use blendFuncSeparate you MUST specify dstAlpha property.');\r\n      }\r\n\r\n      const SRCRGB = srcRGB.toUpperCase();\r\n      const DSTRGB = dstRGB.toUpperCase();\r\n      const SRCALPHA = srcAlpha.toUpperCase();\r\n      const DSTALPHA = dstAlpha.toUpperCase();\r\n\r\n      const glSrcRGB = validateGLConstantDefination(gl, SRCRGB);\r\n      const glDstRGB = validateGLConstantDefination(gl, DSTRGB);\r\n      const glSrcAlpha = validateGLConstantDefination(gl, SRCALPHA);\r\n      const glDstAlpha = validateGLConstantDefination(gl, DSTALPHA);\r\n\r\n      gl.blendFuncSeparate(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha);\r\n    } else if (defined(blend.blendFunc)) {\r\n      const srcFuncName = blend.blendFunc[0].toUpperCase();\r\n      const dstFuncName = blend.blendFunc[1].toUpperCase();\r\n      const src = validateGLConstantDefination(gl, srcFuncName);\r\n      const dst = validateGLConstantDefination(gl, dstFuncName);\r\n      gl.blendFunc(src, dst);\r\n    }\r\n  }\r\n\r\n  if (viewport) {\r\n    gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\r\n  }\r\n\r\n  if (scissor) {\r\n    if (scissor.enable === true) {\r\n      gl.enable(gl.SCISSOR_TEST);\r\n    } else if (scissor.enable === false) {\r\n      gl.disable(gl.SCISSOR_TEST);\r\n    }\r\n    const rect = scissor.rect;\r\n    if (rect) {\r\n      gl.scissor(rect[0], rect[1], rect[2], rect[3]);\r\n    }\r\n  }\r\n\r\n  // motivation: for render coplanar primitives\r\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\r\n  if (defined(polygonOffset)) {\r\n    if (polygonOffset.enable === true) {\r\n      gl.enable(gl.POLYGON_OFFSET_FILL);\r\n    } else if (polygonOffset.enable === false) {\r\n      gl.disable(gl.POLYGON_OFFSET_FILL);\r\n    } else {\r\n      console.warn('polygonOffset.enable MUST be either true or false, current is ' + polygonOffset.enable.toString() + '.');\r\n    }\r\n    // Offset value: o = m * factor + r * units,\r\n    // where m is maximum depth slope of a triangle,\r\n    // r is minimum resolvable difference, which is an implementation-dependent constant.\r\n    gl.polygonOffset(polygonOffset.factor, polygonOffset.units);\r\n  }\r\n\r\n  if (defined(sampleCoverage)) {\r\n    const { alphaToCoverage, value, invert, enable } = sampleCoverage;\r\n\r\n    if (alphaToCoverage === true) {\r\n      gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\r\n    } else if (alphaToCoverage === false) {\r\n      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\r\n    }\r\n\r\n    if (enable === true) {\r\n      gl.enable(gl.SAMPLE_COVERAGE);\r\n    } else if (enable === false) {\r\n      gl.disable(gl.SAMPLE_COVERAGE);\r\n    }\r\n\r\n    if (defined(value) && defined(invert)) {\r\n      if (invert !== true && invert !== false) {\r\n        console.warn('sampleCoverage.invert MUST be boolean.');\r\n      }\r\n      gl.sampleCoverage(value, invert);\r\n    }\r\n  }\r\n\r\n  if (defined(dither)) {\r\n    if (dither === true) {\r\n      gl.enable(gl.DITHER);\r\n    } else if (dither === false) {\r\n      gl.disable(gl.DITHER);\r\n    } else {\r\n      console.warn('setState: dither MUST be a boolean value, otherwise it will be ignored.');\r\n    }\r\n  }\r\n  \r\n}\r\n","const WebGLConstant = {\r\n  // ACTIVE_TEXTURE\r\n  34016: 'ACTIVE_TEXTURE',\r\n  33984: 'TEXTURE0',\r\n  33985: 'TEXTURE1',\r\n  33986: 'TEXTURE2',\r\n  33987: 'TEXTURE3',\r\n  33988: 'TEXTURE4',\r\n  33989: 'TEXTURE5',\r\n  33990: 'TEXTURE6',\r\n  33991: 'TEXTURE7',\r\n  33992: 'TEXTURE8',\r\n  33993: 'TEXTURE9',\r\n  33994: 'TEXTURE10',\r\n  33995: 'TEXTURE11',\r\n  33996: 'TEXTURE12',\r\n  33997: 'TEXTURE13',\r\n  33998: 'TEXTURE14',\r\n  33999: 'TEXTURE15',\r\n  34000: 'TEXTURE16',\r\n  34001: 'TEXTURE17',\r\n  34002: 'TEXTURE18',\r\n  34003: 'TEXTURE19',\r\n  34004: 'TEXTURE20',\r\n  34005: 'TEXTURE21',\r\n  34006: 'TEXTURE22',\r\n  34007: 'TEXTURE23',\r\n  34008: 'TEXTURE24',\r\n  34009: 'TEXTURE25',\r\n  34010: 'TEXTURE26',\r\n  34011: 'TEXTURE27',\r\n  34012: 'TEXTURE28',\r\n  34013: 'TEXTURE29',\r\n  34014: 'TEXTURE30',\r\n  34015: 'TEXTURE31',\r\n\r\n  3410: 'RED_BITS',\r\n  3411: 'GREEN_BITS',\r\n  3412: 'BLUE_BITS',\r\n  3413: 'ALPHA_BITS',\r\n\r\n  2884: 'CULL_FACE',\r\n  // cullFace\r\n  2885: 'CULL_FACE_MODE',\r\n  1028: 'FRONT',\r\n  1029: 'BACK',\r\n  1032: 'FRONT_AND_BACK',\r\n\r\n  // depthFunc, stencilFunc\r\n  512: 'NEVER',\r\n  513: 'LESS',\r\n  514: 'EQUAL',\r\n  515: 'LEQUAL',\r\n  516: 'GREATER',\r\n  517: 'NOTEQUAL',\r\n  518: 'GEQUAL',\r\n  519: 'ALWAYS',\r\n\r\n  // stencilOp(fail, zfail, zpass)\r\n  // stencilOpSeparate(face, fail, zfail, zpass)\r\n  0: 'ZERO', // blendFunc\r\n  1: 'ONE',\r\n  5386: 'INVERT',\r\n  7680: 'KEEP',\r\n  7681: 'REPLACE',\r\n  7682: 'INCR',\r\n  7683: 'DECR',\r\n  34055: 'INCR_WRAP',\r\n  34056: 'DECR_WRAP',\r\n\r\n  // blendEquationSeparate\r\n  32774: 'FUNC_ADD',\r\n  32778: 'FUNC_SUBTRACT',\r\n  32779: 'FUNC_REVERSE_SUBTRACT',\r\n\r\n  // blendFuncSeparate\r\n  768: 'SRC_COLOR',\r\n  770: 'SRC_ALPHA',\r\n  774: 'DST_COLOR',\r\n  772: 'DST_ALPHA',\r\n  32769: 'CONSTANT_COLOR',\r\n  32771: 'CONSTANT_ALPHA',\r\n\r\n  769: 'ONE_MINUS_SRC_COLOR',\r\n  771: 'ONE_MINUS_SRC_ALPHA',\r\n  775: 'ONE_MINUS_DST_COLOR',\r\n  773: 'ONE_MINUS_DST_ALPHA',\r\n  32770: 'ONE_MINUS_CONSTANT_COLOR',\r\n  32772: 'ONE_MINUS_CONSTANT_ALPHA',\r\n\r\n  // FRONT_FACE\r\n  2304: 'CW',\r\n  2305: 'CCW',\r\n\r\n  // hint\r\n  4352: 'DONT_CARE',\r\n  4353: 'FASTEST',\r\n  4354: 'NICEST',\r\n\r\n  // WEBGL_compressed_texture_s3tc\r\n  33776: 'COMPRESSED_RGB_S3TC_DXT1_EXT',\r\n  33777: 'COMPRESSED_RGBA_S3TC_DXT1_EXT',\r\n  33778: 'COMPRESSED_RGBA_S3TC_DXT3_EXT',\r\n  33779: 'COMPRESSED_RGBA_S3TC_DXT5_EXT',\r\n  // EXT_texture_compression_bptc\r\n  36492: 'COMPRESSED_RGBA_BPTC_UNORM_EXT',\r\n  36493: 'COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT',\r\n  36494: 'COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT',\r\n  36495: 'COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT',\r\n  // EXT_texture_compression_rgtc\r\n  36283: 'COMPRESSED_RED_RGTC1_EXT',\r\n  36284: 'COMPRESSED_SIGNED_RED_RGTC1_EXT',\r\n  36285: 'COMPRESSED_RED_GREEN_RGTC2_EXT',\r\n  36286: 'COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT',\r\n\r\n  // UNPACK_COLORSPACE_CONVERSION_WEBGL\r\n  37444: 'BROWSER_DEFAULT_WEBGL',\r\n\r\n  BYTE: 0x1400,\r\n  UNSIGNED_BYTE: 0x1401,\r\n  SHORT: 0x1402,\r\n  UNSIGNED_SHORT: 0x1403,\r\n  INT: 0x1404,\r\n  UNSIGNED_INT: 0x1405,\r\n  FLOAT: 0x1406,\r\n};\r\n\r\nexport default WebGLConstant;\r\n","import defaultValue from './defaultValue.js';\r\n\r\nconst FRAMEBUFFER_STATUS = {\r\n  36053: 'FRAMEBUFFER_COMPLETE',\r\n  36054: 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',\r\n  36055: 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',\r\n  36057: 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',\r\n  36061: 'FRAMEBUFFER_UNSUPPORTED',\r\n};\r\n\r\nfunction createFramebuffer(gl, options) {\r\n  const { colorTexture, depthTexture, depthRenderbuffer } = options;\r\n  const colorAttachments = defaultValue(options.colorAttachments, [ colorTexture ])\r\n\r\n  const fb = gl.createFramebuffer();\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\r\n\r\n  // color\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  const colorAttachmentsLength = colorAttachments.length;\r\n  if (colorAttachmentsLength > 1) {\r\n    const ext = gl.getExtension('WebGL_draw_buffers');\r\n    const drawBuffers = [];\r\n    for (let i = 0; i < colorAttachmentsLength; i++) {\r\n      drawBuffers.push(ext.COLOR_ATTACHMENT0_WEBGL + i);\r\n    }\r\n    ext.drawBuffersWEBGL(drawBuffers);\r\n\r\n    for (let i = 0; i < colorAttachmentsLength; i++) {\r\n      const colorAttachment = colorAttachments[i];\r\n      gl.bindTexture(gl.TEXTURE_2D, colorAttachment);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, colorAttachment, 0);\r\n    }\r\n  } else {\r\n    gl.bindTexture(gl.TEXTURE_2D, colorTexture);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTexture, 0);\r\n  }\r\n  gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n  // depth\r\n  if (depthTexture) {\r\n    gl.bindTexture(gl.TEXTURE_2D, depthTexture);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture, 0);\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n  }\r\n  else if (depthRenderbuffer) {\r\n    const renderbuffer = gl.createRenderbuffer();\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\r\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, depthRenderbuffer.width, depthRenderbuffer.height);\r\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n  }\r\n\r\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\r\n    throw new Error('createFramebuffer: framebuffer combination is NOT completed! Current status is ' + FRAMEBUFFER_STATUS[status] + '.');\r\n  }\r\n\r\n  return fb;\r\n}\r\n\r\nexport default createFramebuffer;\r\n","function isPowerOfTwo(value) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nexport default isPowerOfTwo;\r\n","import defaultValue from './defaultValue.js';\r\nimport WebglConstant from './WebglConstant.js';\r\n\r\nconst cachedBuffer = {};\r\n\r\nfunction isArrayBufferView(value) {\r\n  return value instanceof Float32Array ||\r\n         value instanceof Uint8Array ||\r\n         value instanceof Uint16Array ||\r\n         value instanceof Uint32Array ||\r\n         value instanceof Int8Array ||\r\n         value instanceof Int16Array ||\r\n         value instanceof Int32Array;\r\n}\r\n\r\nfunction getIndicesType(indices) {\r\n  let indicesType;\r\n\r\n  if (Array.isArray(indices)) {\r\n\r\n    indicesType = WebglConstant.UNSIGNED_SHORT;\r\n\r\n  } else if (indices instanceof Uint8Array) {\r\n\r\n    indicesType = WebglConstant.UNSIGNED_BYTE;\r\n\r\n  } else if (indices instanceof Uint16Array) {\r\n\r\n    indicesType = WebglConstant.UNSIGNED_SHORT;\r\n\r\n  } else if (indices instanceof Uint32Array) {\r\n\r\n    indicesType = WebglConstant.UNSIGNED_INT;\r\n\r\n  } else {\r\n    throw new Error('indices MUST be instance of Array, Uint8Array, Uint16Array or Uint32Array.');\r\n  }\r\n  return indicesType;\r\n}\r\n\r\nfunction createBuffer(gl, bufferTarget, source, usage) {\r\n  const buffer = gl.createBuffer();\r\n  gl.bindBuffer(bufferTarget, buffer);\r\n  gl.bufferData(bufferTarget, source, usage);\r\n  gl.bindBuffer(bufferTarget, null);\r\n  return buffer;\r\n}\r\n\r\nfunction createAttributeBuffer(gl, typedArrayOrArray, usage) {\r\n  const bufferKey = typedArrayOrArray.toString();\r\n  let buffer = cachedBuffer[bufferKey];\r\n  if (buffer) {\r\n    return buffer;\r\n  }\r\n\r\n  usage = defaultValue(usage, gl.STATIC_DRAW);\r\n\r\n  let typedArray;\r\n  if (Array.isArray(typedArrayOrArray)) {\r\n    typedArray = new Float32Array(typedArrayOrArray);\r\n  } else if (isArrayBufferView(typedArrayOrArray)) {\r\n    typedArray = typedArrayOrArray;\r\n  } else {\r\n    throw new Error('Buffer data' + typedArrayOrArray + 'must be TypedArray or Array ');\r\n  }\r\n\r\n  buffer = createBuffer(gl, gl.ARRAY_BUFFER, typedArray, usage)\r\n  cachedBuffer[bufferKey] = buffer;\r\n  return buffer;\r\n}\r\n\r\nfunction createIndicesBuffer(gl, typedArrayOrArray, usage) {\r\n  const bufferKey = typedArrayOrArray.toString();\r\n  let buffer = cachedBuffer[bufferKey];\r\n  if (buffer) {\r\n    return buffer;\r\n  }\r\n\r\n  usage = defaultValue(usage, gl.STATIC_DRAW);\r\n\r\n  let typedArray;\r\n  const indicesType = getIndicesType(typedArrayOrArray);\r\n\r\n  if (indicesType === gl.UNSIGNED_BYTE) {\r\n\r\n    typedArray = new Uint8Array(typedArrayOrArray);\r\n\r\n  } else if (indicesType === gl.UNSIGNED_SHORT) {\r\n\r\n    typedArray = new Uint16Array(typedArrayOrArray);\r\n\r\n  } else if (indicesType === gl.UNSIGNED_INT) {\r\n\r\n    typedArray = new Uint32Array(typedArrayOrArray);\r\n    gl.getExtension('OES_element_index_unit');\r\n\r\n  } else {\r\n    throw new Error('Buffer data must be TypedArray or Array ');\r\n  }\r\n\r\n  buffer = createBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, typedArray, usage);\r\n  cachedBuffer[bufferKey] = buffer;\r\n  return buffer;\r\n}\r\n\r\nexport {\r\n  cachedBuffer,\r\n  createAttributeBuffer,\r\n  createIndicesBuffer,\r\n  getIndicesType,\r\n};\r\n","import isArrayLike from './isArrayLike.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport {\r\n  createProgram,\r\n} from './glUtils.js';\r\nimport defined from './defined.js';\r\nimport {\r\n  createAttributeBuffer,\r\n  createIndicesBuffer,\r\n  getIndicesType,\r\n} from './buffer.js';\r\n\r\nconst cachedProgram = {};\r\nconst cachedTextures = {};\r\n\r\nfunction getNumberOfComponentsByType(type) {\r\n  let numberOfComponents = 0;\r\n\r\n  switch (type) {\r\n    case 5126: // gl.FLOAT\r\n      numberOfComponents = 1;\r\n      break;\r\n    case 35664: // gl.FLOAT_VEC2\r\n      numberOfComponents = 2;\r\n      break;\r\n    case 35665: // gl.FLOAT_VEC3\r\n      numberOfComponents = 3;\r\n      break;\r\n    case 35666: // gl.FLOAT_VEC4\r\n      numberOfComponents = 4;\r\n      break;\r\n    default:\r\n      throw new Error('Unrecognize ' + type + ' type.');\r\n  }\r\n  return numberOfComponents;\r\n}\r\n\r\nfunction getAttributeSize(activeAttribute) {\r\n  const { name, size, type } = activeAttribute;\r\n  let s = 0;\r\n  switch (type) {\r\n    case 5126: // gl.FLOAT\r\n      s = size * 1;\r\n      break;\r\n    case 35664: // gl.FLOAT_VEC2\r\n      s = 2 * size;\r\n      break;\r\n    case 35665: // gl.FLOAT_VEC3\r\n      s = 3 * size;\r\n      break;\r\n    case 35666: // gl.FLOAT_VEC4\r\n      s = 4 * size;\r\n      break;\r\n    case 35674: // gl.FLOAT_MAT2\r\n      s = 4 * size;\r\n      break;\r\n    case 35675: // gl.FLOAT_MAT3\r\n      s = 9 * size;\r\n      break;\r\n    case 35676: // gl.FLOAT_MAT4\r\n      s = 16 * size;\r\n      break;\r\n    default:\r\n      console.warn(`Can not recognize attribute ${name} type, current type is ${type}`);\r\n  }\r\n\r\n  return s;\r\n}\r\n\r\n/**\r\n * Execute a draw command.\r\n * @param {WebGLRenderingContext} gl \r\n * @param {Object} options \r\n * @param {String} options.vs Vertex shader text\r\n * @param {String} options.fs Fragment shader text\r\n * @param {Object} [options.attributes] use <code>attributes</code> or <code>vao</code> property.\r\n * @param {WebGLVertexArrayObjectOES} [options.vao] @see {@link createVAO}\r\n * @param {Object} [options.attributeLocations] If you define <code>vao</code> property, in order to correspond to attribute location of VAO, you must specify the location for the vertex attribute of shader program.\r\n * @param {Object} [options.uniforms] The key of object is uniform name, value can be string(texture image file path), number, Array, ArrayBufferView. Uniform array is supported.\r\n * @param {Array | Uint8Array | Uint16Array | Uint32Array} [options.indices] Vertex indices, when using an Array, it is treated as Uint16Array, so if the maximum value of indices is greater then 65535, Uint32Array MUST be used.\r\n * @param {Number} [options.count=indices.length] The number of vertices.\r\n * @param {Number} [options.primitiveType=gl.TRIANGLES] Primitive type. <code>gl.LINES</code>, <code>gl.POINTS</code>.\r\n * @param {WebGLFramebuffer | null} [options.fb=null] See {@link createFramebuffer}.\r\n */\r\nfunction draw(gl, options) {\r\n  const {\r\n    attributes,\r\n    indices,\r\n    vao,\r\n    vs: vsSource,\r\n    fs: fsSource,\r\n    attributeLocations,\r\n    fb\r\n  } = options;\r\n\r\n  let count = options.count;\r\n  if (!defined(count) && defined(indices)) {\r\n    count = indices.length;\r\n  }\r\n  if (!defined(count)) {\r\n    throw new Error('vertices count or indices is not defined.');\r\n  }\r\n\r\n  if (defined(vao) && !defined(attributeLocations)) {\r\n    throw new Error('To use vao, you must defined attributeLocations.');\r\n  }\r\n\r\n  const primitiveType = defaultValue(options.primitiveType, gl.TRIANGLES);\r\n  const uniforms = defaultValue(options.uniforms, defaultValue.EMPTY_OBJECT);\r\n\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\r\n\r\n  const key = vsSource + fsSource;\r\n  let program = cachedProgram[key];\r\n  if (!program) {\r\n    program = createProgram(gl, vsSource, fsSource, attributeLocations);\r\n    cachedProgram[key] = program;\r\n  }\r\n\r\n  gl.useProgram(program);\r\n\r\n  // attributes\r\n  const numberOfAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n  const extVAO = gl.getExtension('OES_vertex_array_object');\r\n  if (defined(vao)) {\r\n    if (extVAO) {\r\n      extVAO.bindVertexArrayOES(vao);\r\n    } else if (gl instanceof WebGL2RenderingContext) {\r\n      gl.bindVertexArray(vao);\r\n    } else {\r\n      throw new Error('this branch never should be executed.');\r\n    }\r\n\r\n  } else if (defined(attributes)) {\r\n    if (extVAO) {\r\n      extVAO.bindVertexArrayOES(null);\r\n    }\r\n\r\n    for (let i = 0; i < numberOfAttributes; i++) {\r\n      const activeAttribute = gl.getActiveAttrib(program, i);\r\n      const attributeName = activeAttribute.name;\r\n\r\n      if (Object.hasOwnProperty.call(attributes, attributeName)) {\r\n        const attribute = attributes[attributeName];\r\n        const attribLocation = gl.getAttribLocation(program, attributeName);\r\n\r\n        if (attribLocation === -1) {\r\n          continue;\r\n        }\r\n\r\n        const size = getAttributeSize(activeAttribute);\r\n        const buffer = createAttributeBuffer(gl, attribute, gl.STATIC_DRAW);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n        gl.enableVertexAttribArray(attribLocation);\r\n        gl.vertexAttribPointer(\r\n          attribLocation,\r\n          size,\r\n          gl.FLOAT,\r\n          false,\r\n          0,\r\n          0\r\n        );\r\n\r\n      }\r\n    }\r\n  } else {\r\n    throw new Error('vao or attributes must be defined.')\r\n  }\r\n\r\n  // uniforms\r\n  const numberOfUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n  const maximumTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n  let currentTextureUnit = 0;\r\n  for (let i = 0; i < numberOfUniforms; i++) {\r\n    const activeUniform = gl.getActiveUniform(program, i);\r\n    let uniformName = activeUniform.name;\r\n    let isUniformArray = false;\r\n\r\n    const indexOfBracket = uniformName.indexOf('[');\r\n    if (indexOfBracket >= 0) {\r\n      // \"u_xxx[0]\" => \"u_xxx\"\r\n      uniformName = uniformName.slice(0, indexOfBracket);\r\n      isUniformArray = true;\r\n    }\r\n    \r\n    if (Object.hasOwnProperty.call(uniforms, uniformName)) {\r\n      const uniform = uniforms[uniformName];\r\n      const uniformLocation = gl.getUniformLocation(program, uniformName);\r\n\r\n      if (uniformLocation === null) {\r\n        continue;\r\n      }\r\n\r\n      // support float, vec[234] uniform array\r\n      if (isUniformArray) {\r\n        const type = activeUniform.type;\r\n        const numberOfComponents = getNumberOfComponentsByType(type);\r\n\r\n        gl['uniform' + numberOfComponents + 'fv'](uniformLocation, Array.from(uniform));\r\n        continue;\r\n      }\r\n\r\n      const typeOfUniform = typeof uniform;\r\n      const textureUnit = gl.TEXTURE0 + currentTextureUnit;\r\n      if (uniform instanceof WebGLTexture) {\r\n        gl.activeTexture(textureUnit);\r\n\r\n        if (activeUniform.type === gl.SAMPLER_2D) {\r\n          gl.bindTexture(gl.TEXTURE_2D, uniform);\r\n        } else if (activeUniform.type === gl.SAMPLER_CUBE) {\r\n          gl.bindTexture(gl.TEXTURE_CUBE_MAP, uniform);\r\n        } else {\r\n          throw new Error(activeUniform, 'type MUST be SAMPLER_2D or SAMPLER_CUBE');\r\n        }\r\n\r\n        gl.uniform1i(uniformLocation, currentTextureUnit);\r\n        currentTextureUnit++;\r\n      } else if (isArrayLike(uniform)) {\r\n        const size = uniform.length;\r\n        if (size <= 4) {\r\n          gl['uniform' + size + 'fv' ](uniformLocation, uniform);\r\n        } else if (size <= 16) {\r\n          const order = Math.floor(Math.sqrt(size));\r\n          const transpose = false; // MUST be false\r\n          gl['uniformMatrix' + order + 'fv'](uniformLocation, transpose, Array.from(uniform));\r\n        }\r\n      } else if (typeOfUniform === 'number') {\r\n        gl.uniform1f(uniformLocation, uniform);\r\n      } else if (typeOfUniform === 'string') {\r\n\r\n        if (currentTextureUnit > maximumTextureUnits) {\r\n          console.error('texture exceed maximum texture units.');\r\n          continue;\r\n        }\r\n\r\n        let texture = cachedTextures[uniform];\r\n\r\n        if (!texture) {\r\n          texture = gl.createTexture();\r\n          gl.activeTexture(textureUnit);\r\n          gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\r\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255, 255]));\r\n          const image = new Image();\r\n          image.src = uniform;\r\n          image.addEventListener('load', () => {\r\n            gl.activeTexture(textureUnit);\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n          });\r\n\r\n          cachedTextures[uniform] = texture;\r\n        }\r\n\r\n        gl.activeTexture(textureUnit);\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.uniform1i(uniformLocation, currentTextureUnit);\r\n\r\n        currentTextureUnit++;\r\n      }\r\n    }\r\n  }\r\n\r\n  // draw\r\n  const hasBoundElementArrayBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\r\n  if (indices && indices.length > 0) {\r\n    const buffer = createIndicesBuffer(gl, indices, gl.STATIC_DRAW);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\r\n\r\n    const indicesType = getIndicesType(indices);\r\n    gl.drawElements(primitiveType, count, indicesType, 0);\r\n  } else if (extVAO && gl.getParameter(extVAO.VERTEX_ARRAY_BINDING_OES) && hasBoundElementArrayBuffer) {\r\n    gl.drawElements(primitiveType, count, gl.UNSIGNED_SHORT, 0);\r\n  } else {\r\n    gl.drawArrays(primitiveType, 0, count);\r\n  }\r\n}\r\n\r\nexport default draw;\r\n","import createContext from './createContext.js';\r\nimport setState from './setState.js';\r\nimport getState from './getState.js';\r\nimport createFramebuffer from './createFramebuffer.js';\r\nimport createTexture from './createTexture.js';\r\nimport updateTexture from './updateTexture.js';\r\nimport createCubeMap from './createCubeMap.js';\r\nimport createVAO from './createVAO.js';\r\nimport clear from './clear.js';\r\nimport draw from './draw.js';\r\n\r\nconst ToyGL = {\r\n  createContext,\r\n  setState,\r\n  getState,\r\n  clear,\r\n  draw,\r\n  createTexture,\r\n  updateTexture,\r\n  createCubeMap,\r\n  createVAO,\r\n  createFramebuffer,\r\n};\r\n\r\nexport default ToyGL;\r\n","import WebGLConstant from './WebglConstant.js';\r\n\r\nexport default function getState(gl) {\r\n  // cull face-related state\r\n  const cullFaceEnabled = gl.getParameter(gl.CULL_FACE);\r\n  const cullFaceMode = gl.getParameter(gl.CULL_FACE_MODE);\r\n  \r\n  // stencil-related state\r\n  const depthTestEnabled = gl.getParameter(gl.DEPTH_TEST);\r\n  const depthClearValue = gl.getParameter(gl.DEPTH_CLEAR_VALUE);\r\n  const depthFunc = gl.getParameter(gl.DEPTH_FUNC);\r\n  const depthWritemask = gl.getParameter(gl.DEPTH_WRITEMASK);\r\n  const depthRange = gl.getParameter(gl.DEPTH_RANGE);\r\n  const depthBits = gl.getParameter(gl.DEPTH_BITS);\r\n\r\n  const stencilTestEnabled = gl.getParameter(gl.STENCIL_TEST);\r\n  const stencilClearValue = gl.getParameter(gl.STENCIL_CLEAR_VALUE);\r\n\r\n  const stencilRef = gl.getParameter(gl.STENCIL_REF);\r\n  const stencilFunc = gl.getParameter(gl.STENCIL_FUNC);\r\n  const stencilFail = gl.getParameter(gl.STENCIL_FAIL);\r\n  const stencilPassDepthFail = gl.getParameter(gl.STENCIL_PASS_DEPTH_FAIL);\r\n  const stencilPassDepthPass = gl.getParameter(gl.STENCIL_PASS_DEPTH_PASS);\r\n  const stencilValueMask = gl.getParameter(gl.STENCIL_VALUE_MASK);\r\n  const stencilWritemask = gl.getParameter(gl.STENCIL_WRITEMASK);\r\n\r\n  const stencilBackRef = gl.getParameter(gl.STENCIL_BACK_REF);\r\n  const stencilBackFunc = gl.getParameter(gl.STENCIL_BACK_FUNC);\r\n  // what action is taken for back-facing polygons when the stencil test fails. Initial value is KEEP\r\n  const stencilBackFail = gl.getParameter(gl.STENCIL_BACK_FAIL);\r\n  const stencilBackPassDepthFail = gl.getParameter(gl.STENCIL_BACK_PASS_DEPTH_FAIL);\r\n  const stencilBackPassDepthPass = gl.getParameter(gl.STENCIL_BACK_PASS_DEPTH_PASS);\r\n  const stencilBackValueMask = gl.getParameter(gl.STENCIL_BACK_VALUE_MASK);\r\n  const stencilBackWritemask = gl.getParameter(gl.STENCIL_BACK_WRITEMASK);\r\n\r\n  const stencilBits = gl.getParameter(gl.STENCIL_BITS);\r\n\r\n  // blend\r\n  const blendEnable = gl.getParameter(gl.BLEND);\r\n  // blendColor\r\n  const blendColor = gl.getParameter(gl.BLEND_COLOR);\r\n  // blendFuncSeparate\r\n  const blendDstRGB = gl.getParameter(gl.BLEND_DST_RGB);\r\n  const blendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\r\n  const blendSrcRGB = gl.getParameter(gl.BLEND_SRC_RGB);\r\n  const blendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\r\n  // blendEquationSeparate\r\n  const blendEquationRGB = gl.getParameter(gl.BLEND_EQUATION_RGB);\r\n  const blendEquationAlpha = gl.getParameter(gl.BLEND_EQUATION_ALPHA);\r\n\r\n  // viewport\r\n  const currentViewport = gl.getParameter(gl.VIEWPORT);\r\n  const maxViewportDims = gl.getParameter(gl.MAX_VIEWPORT_DIMS);\r\n\r\n  const scissorTestEnable = gl.getParameter(gl.SCISSOR_TEST);\r\n  const scissorBox = gl.getParameter(gl.SCISSOR_BOX);\r\n\r\n  // polygon offset fill\r\n  const polygonOffsetFillEnable = gl.getParameter(gl.POLYGON_OFFSET_FILL);\r\n  const polygonOffsetFactor = gl.getParameter(gl.POLYGON_OFFSET_FACTOR);\r\n  const polygonOffsetUnits = gl.getParameter(gl.POLYGON_OFFSET_UNITS);\r\n\r\n  const ditherEnable = gl.getParameter(gl.DITHER);\r\n\r\n  // \r\n  const redBits = gl.getParameter(gl.RED_BITS);\r\n  const greenBits = gl.getParameter(gl.GREEN_BITS);\r\n  const blueBits = gl.getParameter(gl.BLUE_BITS);\r\n  const alphaBits = gl.getParameter(gl.ALPHA_BITS);\r\n  const subpixelBits = gl.getParameter(gl.SUBPIXEL_BITS);\r\n\r\n  const aliasedLineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE);\r\n  const aliasedPointSizeRange = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\r\n\r\n  // color write mask\r\n  const colorWritemask = gl.getParameter(gl.COLOR_WRITEMASK);\r\n  const colorClearValue = gl.getParameter(gl.COLOR_CLEAR_VALUE);\r\n\r\n  // texture-related state\r\n  const activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);\r\n  // The maximum number of texture image units available to the fragment stage of the GL\r\n  const maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n  // Both the vertex shader and fragment processing combined cannot use more than MAX_COMBINED_TEXTURE_IMAGE_UNITS texture image units.\r\n  const maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n  const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n  const maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n  const maxRenderbuffereSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\r\n\r\n  // \r\n  const maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\r\n  // The maximum number of texture image units available to a vertex shader\r\n  const maxVertexTextureImageUnits = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\r\n  const maxVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\r\n  const maxVaryingVectors = gl.getParameter(gl.MAX_VARYING_VECTORS);\r\n\r\n  // gl.pixelStorei(pname, param)\r\n  const packAlignment = gl.getParameter(gl.PACK_ALIGNMENT);\r\n  const unpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\r\n  const unpackColorspaceConversionWebgl = gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL)\r\n  const unpackFlipYWebgl = gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);\r\n  const unpackPremultiplyAlphaWebgl = gl.getParameter(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL);\r\n\r\n  // \r\n  const vendor = gl.getParameter(gl.VENDOR); \r\n  const version = gl.getParameter(gl.VERSION); \r\n\r\n  // Uint32Array\r\n  const compressedTextureFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);\r\n\r\n  // binding\r\n  const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n  const arrayBufferBinding = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\r\n  const elementArrayBufferBinding = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\r\n  const framebufferBinding = gl.getParameter(gl.FRAMEBUFFER_BINDING);\r\n  const renderbufferBinding = gl.getParameter(gl.RENDERBUFFER_BINDING);\r\n  const textureBinding2D = gl.getParameter(gl.TEXTURE_BINDING_2D);\r\n  const textureBindingCubeMap = gl.getParameter(gl.TEXTURE_BINDING_CUBE_MAP);\r\n  const renderer = gl.getParameter(gl.RENDERER);\r\n\r\n  // sample coverage\r\n  const samples = gl.getParameter(gl.SAMPLES);\r\n  const sampleBuffers = gl.getParameter(gl.SAMPLE_BUFFERS);\r\n  const sampleAlphaToCoverage = gl.getParameter(gl.SAMPLE_ALPHA_TO_COVERAGE);\r\n  const sampleCoverageInvert = gl.getParameter(gl.SAMPLE_COVERAGE_INVERT);\r\n  const sampleConverageValue =  gl.getParameter(gl.SAMPLE_COVERAGE_VALUE);\r\n\r\n  const frontFaceOrder = gl.getParameter(gl.FRONT_FACE);\r\n\r\n  const lineWidth = gl.getParameter(gl.LINE_WIDTH);\r\n\r\n  const generateMipmapHint = gl.getParameter(gl.GENERATE_MIPMAP_HINT);\r\n\r\n  const shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n\r\n\r\n  return {\r\n    cullFace: {\r\n      CULL_FACE: cullFaceEnabled,\r\n      CULL_FACE_MODE: WebGLConstant[cullFaceMode],\r\n    },\r\n    depth: {\r\n      DEPTH_TEST: depthTestEnabled,\r\n      DEPTH_CLEAR_VALUE: depthClearValue,\r\n      DEPTH_FUNC: WebGLConstant[depthFunc],\r\n      DEPTH_WRITEMASK: depthWritemask,\r\n      DEPTH_RANGE: depthRange,\r\n      DEPTH_BITS: depthBits,\r\n    },\r\n    stencil: {\r\n      STENCIL_TEST: stencilTestEnabled,\r\n      STENCIL_CLEAR_VALUE: stencilClearValue,\r\n      STENCIL_BITS: stencilBits,\r\n      front: {\r\n        STENCIL_REF: stencilRef,\r\n        STENCIL_FUNC: WebGLConstant[stencilFunc],\r\n        STENCIL_FAIL: WebGLConstant[stencilFail],\r\n        STENCIL_PASS_DEPTH_FAIL: WebGLConstant[stencilPassDepthFail],\r\n        STENCIL_PASS_DEPTH_PASS: WebGLConstant[stencilPassDepthPass],\r\n        STENCIL_VALUE_MASK: Number(stencilValueMask).toString(16),\r\n        STENCIL_WRITEMASK: Number(stencilWritemask).toString(16),\r\n      },\r\n      back: {\r\n        STENCIL_BACK_REF: stencilBackRef,\r\n        STENCIL_BACK_FUNC: WebGLConstant[stencilBackFunc],\r\n        STENCIL_BACK_FAIL: WebGLConstant[stencilBackFail],\r\n        STENCIL_BACK_PASS_DEPTH_FAIL: WebGLConstant[stencilBackPassDepthFail],\r\n        STENCIL_BACK_PASS_DEPTH_PASS: WebGLConstant[stencilBackPassDepthPass],\r\n        STENCIL_BACK_VALUE_MASK: Number(stencilBackValueMask).toString(16),\r\n        STENCIL_BACK_WRITEMASK: Number(stencilBackWritemask).toString(16),  \r\n      },\r\n    },\r\n    blend: {\r\n      BLEND: blendEnable,\r\n      BLEND_COLOR: blendColor,\r\n      BLEND_DST_RGB: WebGLConstant[blendDstRGB],\r\n      BLEND_DST_ALPHA: WebGLConstant[blendDstAlpha],\r\n      BLEND_SRC_RGB: WebGLConstant[blendSrcRGB],\r\n      BLEND_SRC_ALPHA: WebGLConstant[blendSrcAlpha],\r\n      BLEND_EQUATION_RGB: WebGLConstant[blendEquationRGB],\r\n      BLEND_EQUATION_ALPHA: WebGLConstant[blendEquationAlpha],\r\n    },\r\n    viewport: {\r\n      VIEWPORT: currentViewport,\r\n      MAX_VIEWPORT_DIMS: maxViewportDims,\r\n    },\r\n    scissor: {\r\n      SCISSOR_TEST: scissorTestEnable,\r\n      SCISSOR_BOX: scissorBox,\r\n    },\r\n    polygonOffset: {\r\n      POLYGON_OFFSET_FILL: polygonOffsetFillEnable,\r\n      POLYGON_OFFSET_FACTOR: polygonOffsetFactor,\r\n      POLYGON_OFFSET_UNITS: polygonOffsetUnits,\r\n    },\r\n    DITHER: ditherEnable,\r\n\r\n    binding: {\r\n      ARRAY_BUFFER_BINDING: arrayBufferBinding,\r\n      ELEMENT_ARRAY_BUFFER_BINDING: elementArrayBufferBinding,\r\n      CURRENT_PROGRAM: currentProgram,\r\n      FRAMEBUFFER_BINDING: framebufferBinding,\r\n      RENDERBUFFER_BINDING: renderbufferBinding,\r\n      TEXTURE_BINDING_2D: textureBinding2D,\r\n      TEXTURE_BINDING_CUBE: textureBindingCubeMap,\r\n    },\r\n    RENDERER: renderer,\r\n\r\n    color: {\r\n      RED_BITS: redBits,\r\n      GREEN_BITS: greenBits,\r\n      BLUE_BITS: blueBits,\r\n      ALPHA_BITS: alphaBits,\r\n      SUBPIXEL_BITS: subpixelBits,\r\n      COLOR_CLEAR_VALUE: colorClearValue,\r\n      COLOR_WRITEMASK: colorWritemask,\r\n    },\r\n    aliasedRange: {\r\n      ALIASED_LINE_WIDTH_RANGE : aliasedLineWidthRange,\r\n      ALIASED_POINT_SIZE_RANGE: aliasedPointSizeRange,\r\n    },\r\n    texture: {\r\n      MAX_TEXTURE_IMAGE_UNITS: maxTextureImageUnits,\r\n      MAX_COMBINED_TEXTURE_IMAGE_UNITS: maxCombinedTextureImageUnits,\r\n      ACTIVE_TEXTURE: WebGLConstant[activeTexture],\r\n      MAX_TEXTURE_SIZE: maxTextureSize,\r\n      MAX_CUBE_MAP_TEXTURE_SIZE: maxCubeMapTextureSize,\r\n      MAX_RENDERBUFFER_SIZE: maxRenderbuffereSize,\r\n    },\r\n    COMPRESSED_TEXTURE_FORMATS: Array.from(compressedTextureFormats).map(format => WebGLConstant[format]),\r\n    // numCompressedTextureFormats,\r\n\r\n    GENERATE_MIPMAP_HINT: WebGLConstant[generateMipmapHint],\r\n    LINE_WIDTH: lineWidth,\r\n    FRONT_FACE: WebGLConstant[frontFaceOrder],\r\n\r\n    SHADING_LANGUAGE_VERSION: shadingLanguageVersion,\r\n    vertex: {\r\n      MAX_VERTEX_ATTRIBS: maxVertexAttribs,\r\n      MAX_VERTEX_TEXTURE_IMAGE_UNITS: maxVertexTextureImageUnits,\r\n      MAX_VERTEX_UNIFORM_VECTORS: maxVertexUniformVectors,\r\n      MAX_VARYING_VECTORS: maxVaryingVectors\r\n    },\r\n    sample: {\r\n      SAMPLES: samples,\r\n      SAMPLE_BUFFERS: sampleBuffers,\r\n      SAMPLE_ALPHA_TO_COVERAGE: sampleAlphaToCoverage,\r\n      SAMPLE_COVERAGE_VALUE: sampleConverageValue,\r\n      SAMPLE_COVERAGE_INVERT: sampleCoverageInvert\r\n    },\r\n    unpack: {\r\n      PACK_ALIGNMENT: packAlignment,\r\n      UNPACK_ALIGNMENT: unpackAlignment,\r\n      UNPACK_FLIP_Y_WEBGL: unpackFlipYWebgl,\r\n      UNPACK_PREMULTIPLY_ALPHA_WEBGL: unpackPremultiplyAlphaWebgl,\r\n      UNPACK_COLORSPACE_CONVERSION_WEBGL: WebGLConstant[unpackColorspaceConversionWebgl],\r\n    },\r\n    VENDOR: vendor,\r\n    VERSION: version,\r\n  };\r\n}\r\n","import defined from './defined.js';\r\nimport defaultValue from './defaultValue.js';\r\n\r\n/**\r\n * Execute a clear command.\r\n * @param {WebGLRenderingContext} gl \r\n * @param {Object} [options] \r\n * @param {Array} [options.color] \r\n * @param {Number} [options.depth] \r\n * @param {Number} [options.stencil] \r\n * @param {WebGLFramebuffer} [options.fb] \r\n */\r\nfunction clear(gl, options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const { fb, color, depth, stencil } = options;\r\n\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\r\n\r\n  let mask = 0;\r\n  if (color) {\r\n    gl.clearColor(color[0], color[1], color[2], color[3]);\r\n    mask |= gl.COLOR_BUFFER_BIT;\r\n  }\r\n  if (defined(depth)) {\r\n    gl.clearDepth(depth);\r\n    mask |= gl.DEPTH_BUFFER_BIT;\r\n  }\r\n  if (stencil) {\r\n    gl.clearStencil(stencil);\r\n    mask |= gl.STENCIL_BUFFER_BIT;\r\n  }\r\n\r\n  if (mask !== 0) {\r\n    gl.clear(mask);\r\n  }\r\n}\r\n\r\nexport default clear;\r\n","// see https://stackoverflow.com/questions/24048547/checking-if-an-object-is-array-like\r\nfunction isArrayLike(item) {\r\n  return (\r\n    Array.isArray(item) || \r\n    (!!item &&\r\n      typeof item === \"object\" &&\r\n      typeof (item.length) === \"number\" && \r\n      (item.length === 0 ||\r\n        (item.length > 0 && \r\n        (item.length - 1) in item)\r\n      )\r\n    )\r\n  );\r\n}\r\n\r\nexport default isArrayLike;\r\n","import isPowerOfTwo from './isPowerOfTwo.js';\r\nimport defined from './defined.js';\r\nimport defaultValue from './defaultValue.js';\r\n\r\n/**\r\n * Create a WebGLTexture.\r\n * @memberof ToyGL\r\n * @param {WebGLRenderingContext} gl \r\n * @param {Object} options \r\n * @param {Array.<ArrayBufferView | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement>} options.levels all levels data\r\n * @param {ArrayBufferView | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} options.data level 0 data\r\n * @param {Number} options.width\r\n * @param {Number} options.height\r\n * @param {Number} options.internalFormat For WebGL1, internal format must same with format.\r\n * @param {Number} options.format\r\n * @param {Number} options.type Texel data type, such as <code>gl.UNSIGNED_BYTE</code>, <code>gl.FLOAT</code>, <code>gl.UNSIGNED_INT</code>.\r\n * @param {Boolean} [options.generateMipmap=false]\r\n * @param {Number} [options.wrapS=CLAMP_TO_EDGE]\r\n * @param {Number} [options.wrapT=CLAMP_TO_EDGE]\r\n * @param {Number} [options.minFilter=LINEAR]\r\n * @param {Number} [options.magFilter=LINEAR]\r\n * @param {Number} [options.flipY=false] Only valid for DOM-Element uploads\r\n * @param {Number} [options.premultiplyAlpha=false] Only valid for DOM-Element uploads\r\n * @returns {WebGLTexture}\r\n */\r\nfunction createTexture(gl, options) {\r\n  const { internalFormat, type, format, width, height, data, generateMipmap } = options;\r\n\r\n  const wrapS = defaultValue(options.wrapS, gl.CLAMP_TO_EDGE);\r\n  const wrapT = defaultValue(options.wrapT, gl.CLAMP_TO_EDGE);\r\n  const minFilter = defaultValue(options.minFilter, gl.LINEAR);\r\n  const magFilter = defaultValue(options.magFilter, gl.LINEAR);\r\n\r\n  let levels = options.levels;\r\n  if (!levels) {\r\n    levels = [ data ];\r\n  }\r\n\r\n  const flipY = defaultValue(options.flipY, false);\r\n  const premultiplyAlpha = defaultValue(options.premultiplyAlpha, false);\r\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\r\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);\r\n\r\n  const texture = gl.createTexture();\r\n\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n  if (internalFormat === gl.DEPTH_COMPONENT || gl.DEPTH_STENCIL) {\r\n    gl.getExtension('WEBGL_depth_texture');\r\n  }\r\n\r\n  if (type === gl.FLOAT) {\r\n    gl.getExtension('OES_texture_float');\r\n    if (minFilter === gl.LINEAR ||\r\n      minFilter === gl.LINEAR_MIPMAP_NEAREST ||\r\n      minFilter === gl.NEAREST_MIPMAP_LINEAR ||\r\n      minFilter === gl.LINEAR_MIPMAP_LINEAR\r\n      ) {\r\n      gl.getExtension('OES_texture_float_linear');\r\n    }\r\n  }\r\n\r\n  const numberOfLevels = levels.length;\r\n  for (let level = 0; level < numberOfLevels; level++) {\r\n    const levelData = levels[level];\r\n\r\n    if (\r\n      levelData instanceof HTMLImageElement ||\r\n      levelData instanceof HTMLCanvasElement ||\r\n      levelData instanceof HTMLVideoElement\r\n    ) {\r\n      gl.texImage2D(gl.TEXTURE_2D, level, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, levelData);\r\n    } else {\r\n      const border = 0;\r\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, levelData);\r\n    }\r\n  }\r\n\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\r\n\r\n  if (generateMipmap === true) {\r\n    if (isPowerOfTwo(width) && isPowerOfTwo(height)) {\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n      console.warn('createTexture: texture size is NOT power of two, current is ' + width + 'x' + height + '.');\r\n    }\r\n  }\r\n\r\n  gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n  return texture;\r\n}\r\n\r\nexport default createTexture;\r\n","import defaultValue from \"./defaultValue\";\r\n\r\n/**\r\n * Update texture data.\r\n * @param {WebGLRenderingContext} gl \r\n * @param {WebGLTexture} texture \r\n * @param {Object | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} source \r\n * @param {Number} source.width \r\n * @param {Number} source.height \r\n * @param {TypedArray} source.arrayBufferView \r\n * @param {Number} [source.level=0] \r\n * @param {Number} [source.internalFormat=gl.RGBA] \r\n * @param {Number} [source.format=gl.RGBA] \r\n * @param {Number} [source.type=gl.UNSIGNED_BYTE] \r\n * @returns {WebGLTexture}\r\n */\r\nfunction updateTexture(gl, texture, source) {\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n  if (source instanceof HTMLImageElement ||\r\n    source instanceof HTMLCanvasElement ||\r\n    source instanceof HTMLVideoElement) {\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, videoElem);\r\n  } else {\r\n\r\n    const { width, height, arrayBufferView } = source;\r\n    const level = defaultValue(source.level, 0);\r\n    const internalFormat = defaultValue(source.internalFormat, gl.RGBA);\r\n    const format = defaultValue(source.format, gl.RGBA);\r\n    const type = defaultValue(source.internalFormat, gl.UNSIGNED_BYTE);\r\n    const border = 0;\r\n\r\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, arrayBufferView);\r\n  }\r\n\r\n  gl.bindTexture(gl.TEXTURE_2D, null);\r\n  return texture;\r\n}\r\n\r\nexport default updateTexture;\r\n","import defaultValue from './defaultValue.js';\r\n\r\nfunction createCubeMap(gl, options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const level = defaultValue(options.level, 0);\r\n  const data = options.data;\r\n  const width = options.width;\r\n  const height = options.height;\r\n  const format = defaultValue(options.format, gl.RGBA);\r\n  const type = defaultValue(options.type, gl.UNSIGNED_BYTE);\r\n  const internalFormat = defaultValue(options.internalFormat, gl.RGBA);\r\n\r\n  const texture = gl.createTexture();\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\r\n\r\n  const faces = [\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_POSITIVE_X,\r\n      data: data.px,\r\n    },\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\r\n      data: data.nx,\r\n    },\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\r\n      data: data.py,\r\n    },\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\r\n      data: data.ny,\r\n    },\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\r\n      data: data.pz,\r\n    },\r\n    {\r\n      target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\r\n      data: data.nz,\r\n    },\r\n  ]\r\n  \r\n  for (let i = 0; i < 6; i++) {\r\n    const face = faces[i];\r\n    const target = face.target;\r\n    const bufferView = face.data;\r\n    if (bufferView instanceof HTMLImageElement) {\r\n      gl.texImage2D(target, level, internalFormat, format, type, bufferView);\r\n    } else {\r\n      gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, bufferView);\r\n    }\r\n\r\n    // default texture settings\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n  }\r\n\r\n  gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\r\n\r\n  return texture;\r\n}\r\n\r\nexport default createCubeMap;\r\n","import { createAttributeBuffer, createIndicesBuffer } from \"./buffer.js\";\r\nimport defined from \"./defined.js\";\r\n\r\n/**\r\n * Create a vertex array object. You can imagine it like this\r\n * <pre>\r\n * var glState = {\r\n *   attributeState: {\r\n *     ELEMENT_ARRAY_BUFFER: null,\r\n *     attributes: [\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\r\n *     ],\r\n *   },\r\n * </pre>\r\n * @param {WebGLRenderingContext|WebGL2RenderingContext} gl \r\n * @param {Object} options \r\n * @param {Object} options.attributes The key of Object is vertex attribute name, value is a Object, it includes <code>location</code>, <code>size</code> and <code>data</code> property, for example:\r\n * <pre>\r\n * {\r\n *   a_pos: {\r\n *     location: 0,\r\n *     size: 3,\r\n *     data: [\r\n *       0, 0, 0,\r\n *       1, 1, 1,\r\n *       0, 1, 0,\r\n *     ]\r\n *   }\r\n * }\r\n * </pre>\r\n * @param {Object} options.indices ELEMENT_ARRAY_BUFFER of vertex array.\r\n * @returns {WebGLVertexArrayObjectOES}\r\n */\r\nfunction createVAO(gl, options) {\r\n  let ext;\r\n  let vao;\r\n\r\n  if (gl instanceof WebGLRenderingContext) {\r\n    ext = gl.getExtension('OES_vertex_array_object');\r\n    if (!ext) {\r\n      throw new Error('Your device does not support VAO(OES_vertex_array_object extension), try to use vertex attributes.');\r\n    }\r\n\r\n    vao = ext.createVertexArrayOES();\r\n    ext.bindVertexArrayOES(vao);\r\n  } else if (gl instanceof WebGL2RenderingContext) {\r\n    vao = gl.createVertexArray();\r\n    gl.bindVertexArray(vao);\r\n  } else {\r\n    throw new Error('gl MUST be instance of WebGLRenderingContext or WebGL2RenderingContext.');\r\n  }\r\n\r\n  const attributes = options.attributes;\r\n  const indices = options.indices;\r\n\r\n  for (const attributeName in attributes) {\r\n    if (Object.hasOwnProperty.call(attributes, attributeName)) {\r\n      const { location, data, size } = attributes[attributeName];\r\n\r\n      const buffer = createAttributeBuffer(gl, data, gl.STATIC_DRAW);\r\n\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      gl.enableVertexAttribArray(location);\r\n\r\n      const type = gl.FLOAT;\r\n      const normalized = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\r\n    }\r\n  }\r\n\r\n  if (defined(indices)) {\r\n    const indicesBuffer = createIndicesBuffer(gl, indices, gl.STATIC_DRAW);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);\r\n  }\r\n\r\n  if (gl instanceof WebGLRenderingContext) {\r\n    ext.bindVertexArrayOES(null);\r\n  } else if (gl instanceof WebGL2RenderingContext) {\r\n    gl.bindVertexArray(null);\r\n  }\r\n\r\n  return vao;\r\n}\r\n\r\nexport default createVAO;"],"names":["defined","a","validateStencilOp","op","toUpperCase","validateGLConstantDefination","gl","constantName","constant","Error","defaultValue","b","EMPTY_OBJECT","Object","freeze","global","window","applyStencilStateSeparate","face","state","writeMask","stencilMaskSeparate","func","ref","valueMask","validateStencilFunc","stencilFuncSeparate","fail","zfail","zpass","stencilOpSeparate","WebGLConstant","34016","33984","33985","33986","33987","33988","33989","33990","33991","33992","33993","33994","33995","33996","33997","33998","33999","34000","34001","34002","34003","34004","34005","34006","34007","34008","34009","34010","34011","34012","34013","34014","34015","3410","3411","3412","3413","2884","2885","1028","1029","1032","512","513","514","515","516","517","518","519","0","1","5386","7680","7681","7682","7683","34055","34056","32774","32778","32779","768","770","774","772","32769","32771","769","771","775","773","32770","32772","2304","2305","4352","4353","4354","33776","33777","33778","33779","36492","36493","36494","36495","36283","36284","36285","36286","37444","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","FRAMEBUFFER_STATUS","36053","36054","36055","36057","36061","isPowerOfTwo","value","cachedBuffer","getIndicesType","indices","indicesType","Array","isArray","WebglConstant","Uint8Array","Uint16Array","Uint32Array","createBuffer","bufferTarget","source","usage","buffer","bindBuffer","bufferData","createAttributeBuffer","typedArrayOrArray","bufferKey","toString","typedArray","STATIC_DRAW","Float32Array","Int8Array","Int16Array","Int32Array","ARRAY_BUFFER","createIndicesBuffer","getExtension","ELEMENT_ARRAY_BUFFER","cachedProgram","cachedTextures","getNumberOfComponentsByType","type","numberOfComponents","getAttributeSize","activeAttribute","name","size","s","console","warn","createContext","contextOptions","canvas","document","createElement","style","width","height","setProperty","innerWidth","innerHeight","requireWebgl2","getContext","setState","depthTest","stencilTest","colorMask","cull","blend","viewport","scissor","polygonOffset","sampleCoverage","dither","enable","CULL_FACE","disable","cullFace","frontFace","DEPTH_TEST","depthFunc","write","depthMask","STENCIL_TEST","front","back","FRONT","BACK","BLEND","blendColor","blendEquationSeparate","rgb","alpha","RGB","ALPHA","glRGB","glALPHA","blendEquation","equationName","equation","blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","SRCRGB","DSTRGB","SRCALPHA","DSTALPHA","glSrcRGB","glDstRGB","glSrcAlpha","glDstAlpha","blendFunc","srcFuncName","dstFuncName","src","dst","SCISSOR_TEST","rect","POLYGON_OFFSET_FILL","factor","units","alphaToCoverage","invert","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_COVERAGE","DITHER","getState","cullFaceEnabled","getParameter","cullFaceMode","CULL_FACE_MODE","depthTestEnabled","depthClearValue","DEPTH_CLEAR_VALUE","DEPTH_FUNC","depthWritemask","DEPTH_WRITEMASK","depthRange","DEPTH_RANGE","depthBits","DEPTH_BITS","stencilTestEnabled","stencilClearValue","STENCIL_CLEAR_VALUE","stencilRef","STENCIL_REF","stencilFunc","STENCIL_FUNC","stencilFail","STENCIL_FAIL","stencilPassDepthFail","STENCIL_PASS_DEPTH_FAIL","stencilPassDepthPass","STENCIL_PASS_DEPTH_PASS","stencilValueMask","STENCIL_VALUE_MASK","stencilWritemask","STENCIL_WRITEMASK","stencilBackRef","STENCIL_BACK_REF","stencilBackFunc","STENCIL_BACK_FUNC","stencilBackFail","STENCIL_BACK_FAIL","stencilBackPassDepthFail","STENCIL_BACK_PASS_DEPTH_FAIL","stencilBackPassDepthPass","STENCIL_BACK_PASS_DEPTH_PASS","stencilBackValueMask","STENCIL_BACK_VALUE_MASK","stencilBackWritemask","STENCIL_BACK_WRITEMASK","stencilBits","STENCIL_BITS","blendEnable","BLEND_COLOR","blendDstRGB","BLEND_DST_RGB","blendDstAlpha","BLEND_DST_ALPHA","blendSrcRGB","BLEND_SRC_RGB","blendSrcAlpha","BLEND_SRC_ALPHA","blendEquationRGB","BLEND_EQUATION_RGB","blendEquationAlpha","BLEND_EQUATION_ALPHA","currentViewport","VIEWPORT","maxViewportDims","MAX_VIEWPORT_DIMS","scissorTestEnable","scissorBox","SCISSOR_BOX","polygonOffsetFillEnable","polygonOffsetFactor","POLYGON_OFFSET_FACTOR","polygonOffsetUnits","POLYGON_OFFSET_UNITS","ditherEnable","redBits","RED_BITS","greenBits","GREEN_BITS","blueBits","BLUE_BITS","alphaBits","ALPHA_BITS","subpixelBits","SUBPIXEL_BITS","aliasedLineWidthRange","ALIASED_LINE_WIDTH_RANGE","aliasedPointSizeRange","ALIASED_POINT_SIZE_RANGE","colorWritemask","COLOR_WRITEMASK","colorClearValue","COLOR_CLEAR_VALUE","activeTexture","ACTIVE_TEXTURE","maxTextureImageUnits","MAX_TEXTURE_IMAGE_UNITS","maxCombinedTextureImageUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubeMapTextureSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxRenderbuffereSize","MAX_RENDERBUFFER_SIZE","maxVertexAttribs","MAX_VERTEX_ATTRIBS","maxVertexTextureImageUnits","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxVertexUniformVectors","MAX_VERTEX_UNIFORM_VECTORS","maxVaryingVectors","MAX_VARYING_VECTORS","packAlignment","PACK_ALIGNMENT","unpackAlignment","UNPACK_ALIGNMENT","unpackColorspaceConversionWebgl","UNPACK_COLORSPACE_CONVERSION_WEBGL","unpackFlipYWebgl","UNPACK_FLIP_Y_WEBGL","unpackPremultiplyAlphaWebgl","UNPACK_PREMULTIPLY_ALPHA_WEBGL","vendor","VENDOR","version","VERSION","compressedTextureFormats","COMPRESSED_TEXTURE_FORMATS","currentProgram","CURRENT_PROGRAM","arrayBufferBinding","ARRAY_BUFFER_BINDING","elementArrayBufferBinding","ELEMENT_ARRAY_BUFFER_BINDING","framebufferBinding","FRAMEBUFFER_BINDING","renderbufferBinding","RENDERBUFFER_BINDING","textureBinding2D","TEXTURE_BINDING_2D","textureBindingCubeMap","TEXTURE_BINDING_CUBE_MAP","renderer","RENDERER","samples","SAMPLES","sampleBuffers","SAMPLE_BUFFERS","sampleAlphaToCoverage","sampleCoverageInvert","SAMPLE_COVERAGE_INVERT","sampleConverageValue","SAMPLE_COVERAGE_VALUE","frontFaceOrder","FRONT_FACE","lineWidth","LINE_WIDTH","generateMipmapHint","GENERATE_MIPMAP_HINT","shadingLanguageVersion","SHADING_LANGUAGE_VERSION","depth","stencil","Number","binding","TEXTURE_BINDING_CUBE","color","aliasedRange","texture","from","map","format","vertex","sample","unpack","clear","options","fb","bindFramebuffer","FRAMEBUFFER","mask","clearColor","COLOR_BUFFER_BIT","clearDepth","DEPTH_BUFFER_BIT","clearStencil","STENCIL_BUFFER_BIT","draw","attributes","vao","vs","vsSource","fs","fsSource","attributeLocations","count","length","primitiveType","TRIANGLES","uniforms","key","program","vertexShaderSource","fragmentShaderSource","createShader","VERTEX_SHADER","shaderSource","compileShader","FRAGMENT_SHADER","createProgram","attachShader","deleteShader","attributeName","hasOwnProperty","call","location","bindAttribLocation","linkProgram","log","getProgramParameter","LINK_STATUS","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","error","getProgramInfoLog","useProgram","numberOfAttributes","ACTIVE_ATTRIBUTES","extVAO","bindVertexArrayOES","WebGL2RenderingContext","bindVertexArray","i","getActiveAttrib","attribute","attribLocation","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","numberOfUniforms","ACTIVE_UNIFORMS","maximumTextureUnits","currentTextureUnit","activeUniform","getActiveUniform","uniformName","isUniformArray","indexOfBracket","indexOf","slice","uniform","uniformLocation","getUniformLocation","typeOfUniform","textureUnit","TEXTURE0","WebGLTexture","SAMPLER_2D","bindTexture","TEXTURE_2D","SAMPLER_CUBE","TEXTURE_CUBE_MAP","uniform1i","item","order","Math","floor","sqrt","transpose","uniform1f","createTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","texImage2D","RGBA","image","Image","addEventListener","hasBoundElementArrayBuffer","drawElements","VERTEX_ARRAY_BINDING_OES","drawArrays","internalFormat","data","generateMipmap","wrapS","wrapT","minFilter","magFilter","levels","flipY","premultiplyAlpha","pixelStorei","DEPTH_COMPONENT","DEPTH_STENCIL","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","numberOfLevels","level","levelData","HTMLImageElement","HTMLCanvasElement","HTMLVideoElement","border","updateTexture","videoElem","arrayBufferView","createCubeMap","faces","target","TEXTURE_CUBE_MAP_POSITIVE_X","px","TEXTURE_CUBE_MAP_NEGATIVE_X","nx","TEXTURE_CUBE_MAP_POSITIVE_Y","py","TEXTURE_CUBE_MAP_NEGATIVE_Y","ny","TEXTURE_CUBE_MAP_POSITIVE_Z","pz","TEXTURE_CUBE_MAP_NEGATIVE_Z","nz","bufferView","createVAO","ext","WebGLRenderingContext","createVertexArrayOES","createVertexArray","normalized","stride","offset","indicesBuffer","createFramebuffer","colorTexture","depthTexture","depthRenderbuffer","colorAttachments","colorAttachmentsLength","drawBuffers","push","COLOR_ATTACHMENT0_WEBGL","drawBuffersWEBGL","colorAttachment","framebufferTexture2D","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","renderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE"],"mappings":"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"}