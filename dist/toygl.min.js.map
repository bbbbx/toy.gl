{"version":3,"file":"toygl.min.js","sources":["../src/defined.js","../src/glUtils.js","../src/defaultValue.js","../src/createContext.js","../src/setState.js","../src/WebglConstant.js","../src/createFramebuffer.js","../src/isPowerOfTwo.js","../src/buffer.js","../src/draw.js","../src/index.js","../src/getState.js","../src/clear.js","../src/isArrayLike.js","../src/createTexture.js","../src/updateTexture.js","../src/createCubeMap.js","../src/createVAO.js"],"sourcesContent":["function defined(a) {\n  return a !== null && a !== undefined;\n}\n\nexport default defined;\n","import defined from \"./defined\";\n\nconst global = window;\n\n/**\n * Create a program and/or bind attribute location.\n * @param {WebGLRenderingContext} gl \n * @param {String} vertexShaderSource \n * @param {String} fragmentShaderSource \n * @param {Object} attributeLocations { [attributeName]: location }\n * @returns {WebGLProgram}\n * @ignore\n */\nfunction createProgram(gl, vertexShaderSource, fragmentShaderSource, attributeLocations) {\n  const vs = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(vs, vertexShaderSource);\n  gl.compileShader(vs);\n  \n  const fs = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(fs, fragmentShaderSource);\n  gl.compileShader(fs);\n\n  const program = gl.createProgram();\n  gl.attachShader(program, vs);\n  gl.attachShader(program, fs);\n\n  gl.deleteShader(vs);\n  gl.deleteShader(fs);\n\n  // bind attribute location\n  if (defined(attributeLocations)) {\n    for (const attributeName in attributeLocations) {\n      if (Object.hasOwnProperty.call(attributeLocations, attributeName)) {\n        const location = attributeLocations[attributeName];\n        gl.bindAttribLocation(program, location, attributeName);\n      }\n    }\n  }\n\n  gl.linkProgram(program);\n\n  let log = '';\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\n      log = gl.getShaderInfoLog(fs);\n      console.error('Fragment shader failed to compiled: ' + log);\n    }\n\n    if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\n      log = gl.getShaderInfoLog(vs);\n      console.error('Vertex shader failed to compiled: ' + log);\n    }\n\n    log = gl.getProgramInfoLog(program);\n    console.error('Shader program link log: ' + log);\n  }\n\n  return program;\n}\n\nfunction setCanvasToDisplaySize(canvas) {\n  const dpr = global.devicePixelRatio;\n  const displayWidth = Math.round(canvas.clientWidth * dpr);\n  const displayHeight = Math.round(canvas.clientHeight * dpr);\n\n  const needResize = canvas.width !== displayWidth ||\n                     canvas.height !== displayHeight;\n\n  if (needResize) {\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }\n}\n\nfunction validateStencilFunc(func) {\n  func = func.toUpperCase();\n  if (func === 'NEVER' ||\n    func === 'ALWAYS' ||\n    func === 'LESS' ||\n    func === 'LEQUAL' ||\n    func === 'NOTEQUAL' ||\n    func === 'EQUAL' ||\n    func === 'GREATER' ||\n    func === 'GEQUAL'\n  ) {\n    return true;\n  }\n  return false;\n}\n\nfunction validateStencilOp(op) {\n  op = op.toUpperCase();\n  if (op === 'KEEP' ||\n    op === 'ZERO' ||\n    op === 'REPLACE' ||\n    op === 'INCR' ||\n    op === 'DECR' ||\n    op === 'INVERT' ||\n    op === 'INCR_WRAP' ||\n    op === 'DECR_WRAP'\n  ) {\n    return true;\n  }\n  return false;\n}\n\nfunction validateGLConstantDefination(gl, constantName) {\n  const constant = gl[constantName];\n  if (!defined(constant)) {\n    throw new Error('gl.' + constantName + ' is not defined.');\n  }\n  return constant;\n}\n\nexport {\n  validateGLConstantDefination,\n  validateStencilFunc,\n  validateStencilOp,\n  createProgram,\n  setCanvasToDisplaySize,\n};\n","function defaultValue(value, fallbackValue) {\n  if (value === null || value === undefined) {\n    return fallbackValue;\n  }\n  return value;\n}\n\ndefaultValue.EMPTY_OBJECT = Object.freeze({});\n\nexport default defaultValue;\n","import { setCanvasToDisplaySize } from \"./glUtils.js\";\nimport defaultValue from './defaultValue.js';\n\nconst global = window;\n\n/**\n * Create an instance of WebGLRenderingContext or WebGL2RenderingContext.\n * @param {Object} contextOptions \n * @param {Boolean} [contextOptions.alpha=true] \n * @param {Boolean} [contextOptions.depth=true] \n * @param {Boolean} [contextOptions.stencil=false] \n * @param {Boolean} [contextOptions.antialias=true] \n * @param {Boolean} [contextOptions.premultipliedAlpha=true] \n * @param {Boolean} [contextOptions.preserveDrawingBuffer=false] \n * @param {Boolean} [contextOptions.requireWebgl2=false] \n * @param {HTMLCanvasElement} [contextOptions.canvas] \n * @returns {WebGLRenderingContext}\n * \n * @example\n * // create a fullscreen WebGLRenderingContext\n * const gl = ToyGL.createContext();\n */\nfunction createContext(contextOptions) {\n  contextOptions = defaultValue(contextOptions, defaultValue.EMPTY_OBJECT);\n\n  let canvas = contextOptions.canvas;\n  if (!canvas) {\n    canvas = global.document.createElement('canvas');\n    canvas.style.width = '100vw';\n    canvas.style.height = '100vh';\n    canvas.style.setProperty('display', 'block');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n  }\n\n  let gl;\n  if (contextOptions.requireWebgl2) {\n    gl = canvas.getContext('webgl2', contextOptions);\n  } else {\n    gl = canvas.getContext('webgl', contextOptions);\n  }\n\n  return gl;\n};\n\nexport default createContext;\n","import defined from './defined.js';\nimport {\n  validateGLConstantDefination,\n  validateStencilFunc,\n  validateStencilOp,\n} from \"./glUtils.js\";\n\nfunction applyStencilStateSeparate(gl, face, state) {\n  if (defined(state.writeMask)) {\n    gl.stencilMaskSeparate(face, state.writeMask);\n  }\n\n  if (defined(state.func) &&\n    defined(state.ref) &&\n    defined(state.valueMask)\n  ) {\n    if (validateStencilFunc(state.func) === false) {\n      throw new Error('setState: stencil func is invalid, current is ' + state.func + '!');\n    }\n    const func = state.func.toUpperCase();\n    gl.stencilFuncSeparate(face, gl[func], state.ref, state.valueMask);\n  }\n\n  if (defined(state.fail) &&\n    defined(state.zfail) &&\n    defined(state.zpass)\n  ) {\n    if (validateStencilOp(state.fail) === false ||\n      validateStencilOp(state.zfail) === false ||\n      validateStencilOp(state.zpass) === false\n    ) {\n      throw new Error('setState: stencil op is invalid, current is ' + state.fail + ', ' + state.zfail + ', ' + state.zpass + '!');\n    }\n    const fail = state.fail.toUpperCase();\n    const zfail = state.zfail.toUpperCase();\n    const zpass = state.zpass.toUpperCase();\n    gl.stencilOpSeparate(face, gl[fail], gl[zfail], gl[zpass]);\n  }\n}\n\n/**\n * Set render state, includes cull depthTest, stencilTest, colorMask, blend, viewport, depthRange, scissor, polygonOffset, sampleCoverage and dither.\n * @param {WebGLRenderbuffer} gl \n * @param {Object} state \n * @param {Object} [state.cull] \n * @param {Boolean} [state.cull.enable] Whether to perform faces culling.\n * @param {'back' | 'front' | 'front_and_back'} [state.cull.face] Culling which face. Case is unsensitive.\n * @param {'ccw' | 'cw'} [state.cull.frontFace] Short for counter-clock wise and clock wise. Case is unsensitive.\n * @param {Object} [state.depthTest] \n * @param {Boolean} [state.depthTest.enable] Whether to perform depth test.\n * @param {'less' | 'greater' | 'always' | 'never' | 'equal' | 'notequal' | 'lequal' | 'gequal'} [state.depthTest.func] The function is used to compare fragment depth value with depth buffer. Returning true means depth test passed. Case is unsensitive.\n * @param {Boolean} [state.depthTest.write] Whether write the fragment depth value to depth buffer.\n * @param {Object} [state.stencilTest] ref func storedStencilValue, if pass then write (writeMask & ref) to storedStencilValue\n * @param {Object} [state.stencilTest.enable] Whether to perform stencil test.\n * @param {Object} [state.stencilTest.front] Front face\n * @param {Number} [state.stencilTest.front.writeMask=all 1] Mask used for writing stencil buffer.\n * @param {String} [state.stencilTest.front.func] Test function for stencil test, same as <code>depthTest.func</code> property.\n * @param {Number} [state.stencilTest.front.ref=0] Reference value for stencil test.\n * @param {Number} [state.stencilTest.front.valueMask=all 1] A bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done.\n * @param {'keep' | 'zero' | 'replace' | 'incr' | 'decr' | 'incr_wrap' | 'decr_wrap' | 'invert'} [state.stencilTest.front.fail='keep'] What to do for stencil buffer when the stencil test fails.\n * @param {String} [state.stencilTest.front.zfail] What to do for stencil buffer when the stencil test passes and the depth test fails.\n * @param {String} [state.stencilTest.front.zpass] What to do for stencil buffer when both the stencil test and the depth test pass.\n * @param {Object} [state.stencilTest.back] Same as <code>stencilTest.front</code>, but for back face.\n * @param {Array.<Boolean>} [state.colorMask] Sets which color components to enable or to disable when drawing or rendering to a <code>WebGLFramebuffer</code>.\n * @param {Object} [state.blend] \n * @param {Boolean} [state.blend.enable] \n * @param {Array.<Number>} [state.blend.blendColor] <code>[red, green, blue, alpha]</code>, set constant color.\n * @param {'func_add' | 'func_subtract' | 'func_reverse_subtract'} [state.blend.blendEquation] set both RGB and Alpha\n * @param {Object} [state.blend.blendEquationSeparate] set RGB and Alpha separately\n * @param {String} [state.blend.blendEquationSeparate.rgb] same as <code>blend.blendEquation</code>\n * @param {String} [state.blend.blendEquationSeparate.alpha] same as <code>blend.blendEquation</code>\n * @param {Array.<String>} [state.blend.blendFunc] <code>[srcFactor, dstFactor]</code>, see <code>srcRGB</code> and <code>dstRGB</code>\n * @param {Object} [state.blend.blendFuncSeparate] set RGB and Alpha separately\n * @param {String} [state.blend.blendFuncSeparate.srcRGB] <code>blendFuncSeparate.dstRGB</code> and 'src_alpha_saturate'\n * @param {String} [state.blend.blendFuncSeparate.dstRGB] 'zero' | 'one' | 'src_color' | 'src_alpha' | 'dst_color' | 'dst_alpha' | 'constant_color' | 'constant_alpha' and with 'one_minus_' prefix.\n * @param {String} [state.blend.blendFuncSeparate.srcAlpha] Same as <code>srcRGB</code>\n * @param {String} [state.blend.blendFuncSeparate.dstAlpha] Same as <code>dstRGB</code>\n * @param {Array.<Number>} [state.viewport] <code>[x, y, width, height]</code>, which specifies the affine transformation of x and y from NDC to window coordinates.\n * @param {Array.<Number>} [state.depthRange] <code>[near, far]</code>, which specifies the depth range mapping from NDC to window or viewport coordinates.\n * @param {Object} [state.scissor] Scissor test\n * @param {Boolean} [state.scissor.enable] Whether enable scissor test.\n * @param {Array.<Number>} [state.scissor.rect] <code>[x, y, width, height]</code>, sets a scissor box, which limits the drawing to a specified rectangle.\n * @param {Object} [state.polygonOffset] Polygon(Triangle) depth offset\n * @param {Object} [state.polygonOffset.enable] Whether enable polygon depth offset.\n * @param {Object} [state.polygonOffset.factor] \n * @param {Object} [state.polygonOffset.units] \n * @param {Object} [state.sampleCoverage] \n * @param {Boolean} [state.sampleCoverage.alphaToCoverage] \n * @param {Boolean} [state.sampleCoverage.enable] \n * @param {Number} [state.sampleCoverage.value] \n * @param {Boolean} [state.sampleCoverage.invert] \n * @param {Boolean} [state.dither] Whether enable dither.\n * \n */\nfunction setState(gl, state) {\n  const { cull, depthTest, stencilTest, colorMask, blend, viewport, depthRange, scissor, polygonOffset, sampleCoverage, dither } = state;\n\n  if (cull) {\n    if (cull.enable) {\n      gl.enable(gl.CULL_FACE);\n    } else {\n      gl.disable(gl.CULL_FACE);\n    }\n\n    const face = cull.face && cull.face.toUpperCase();\n    if (face === 'BACK' || face === 'FRONT' || face === 'FRONT_AND_BACK') {\n      gl.cullFace(gl[face]);\n    }\n\n    let frontFace = defined(cull.frontFace) && cull.frontFace.toUpperCase();\n    if (frontFace === 'CCW' || frontFace === 'CW') {\n      gl.frontFace(gl[frontFace]);\n    }\n  }\n\n  if (depthTest) {\n    if (depthTest.enable === true) {\n      gl.enable(gl.DEPTH_TEST);\n    } else if (depthTest.enable === false) {\n      gl.disable(gl.DEPTH_TEST);\n    }\n\n    if (depthTest.func) {\n      const func = depthTest.func.toUpperCase();\n      gl.depthFunc(gl[func]);\n    }\n\n    if (depthTest.write === true) {\n      gl.depthMask(true);\n    } else if (depthTest.write === false) {\n      gl.depthMask(false);\n    }\n  }\n\n  if (stencilTest) {\n    if (stencilTest.enable === true) {\n      gl.enable(gl.STENCIL_TEST);\n    } else if (stencilTest.enable === false) {\n      gl.disable(gl.STENCIL_TEST);\n    }\n\n    // pass = (ref & readMask) func (stencilValue & readMask)\n    // If the stencil test fails, the incoming fragment is discarded\n    // if (!pass)\n         // update stencilValue\n    //   stencilValue = failOp(ref, stencilValue) & writeMask\n    // else if zfail\n    //   zfailOp\n    // else if zpass\n    //   zpassOp \n    const { front, back } = stencilTest;\n    if (front) {\n      applyStencilStateSeparate(gl, gl.FRONT, front);\n    }\n    if (back) {\n      applyStencilStateSeparate(gl, gl.BACK, back);\n    }\n  }\n\n  if (colorMask) {\n    gl.colorMask(colorMask[0], colorMask[1], colorMask[2], colorMask[3]);\n  }\n\n  if (blend) {\n    if (blend.enable === true) {\n      gl.enable(gl.BLEND)\n    } else if (blend.enable === false) {\n      gl.disable(gl.BLEND)\n    }\n\n    if (blend.blendColor) {\n      gl.blendColor(...blend.blendColor);\n    }\n\n    if (blend.blendEquationSeparate) {\n      const { rgb, alpha } = blend.blendEquationSeparate;\n      if (!defined(rgb) || !defined(alpha)) {\n        throw new Error('To use blendEquationSeparate you MUST specify rgb and alpha.');\n      }\n      const RGB = rgb.toUpperCase();\n      const ALPHA = alpha.toUpperCase();\n\n      const glRGB = gl[RGB];\n      const glALPHA = gl[ALPHA];\n      if (!defined(glRGB)) {\n        throw new Error('gl.' + RGB + ' is undefined.');\n      }\n      if (!defined(glALPHA)) {\n        throw new Error('gl.' + ALPHA + ' is undefined.');\n      }\n\n      gl.blendEquationSeparate(glRGB, glALPHA);\n    } else if (blend.blendEquation) {\n      const equationName = blend.blendEquation.toUpperCase();\n      const equation = gl[equationName];\n      if (!defined(equation)) {\n        throw new Error(equationName + ' is invalid.');\n      }\n\n      gl.blendEquation(equation);\n    }\n\n    const blendFuncSeparate = blend.blendFuncSeparate;\n    if (defined(blendFuncSeparate)) {\n      const { srcRGB, dstRGB, srcAlpha, dstAlpha } = blendFuncSeparate;\n      if (!defined(srcRGB)) {\n        throw new Error('To use blendFuncSeparate you MUST specify srcRGB property.');\n      }\n      if (!defined(dstRGB)) {\n        throw new Error('To use blendFuncSeparate you MUST specify dstRGB property.');\n      }\n      if (!defined(srcAlpha)) {\n        throw new Error('To use blendFuncSeparate you MUST specify srcAlpha property.');\n      }\n      if (!defined(dstAlpha)) {\n        throw new Error('To use blendFuncSeparate you MUST specify dstAlpha property.');\n      }\n\n      const SRCRGB = srcRGB.toUpperCase();\n      const DSTRGB = dstRGB.toUpperCase();\n      const SRCALPHA = srcAlpha.toUpperCase();\n      const DSTALPHA = dstAlpha.toUpperCase();\n\n      const glSrcRGB = validateGLConstantDefination(gl, SRCRGB);\n      const glDstRGB = validateGLConstantDefination(gl, DSTRGB);\n      const glSrcAlpha = validateGLConstantDefination(gl, SRCALPHA);\n      const glDstAlpha = validateGLConstantDefination(gl, DSTALPHA);\n\n      gl.blendFuncSeparate(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha);\n    } else if (defined(blend.blendFunc)) {\n      const srcFuncName = blend.blendFunc[0].toUpperCase();\n      const dstFuncName = blend.blendFunc[1].toUpperCase();\n      const src = validateGLConstantDefination(gl, srcFuncName);\n      const dst = validateGLConstantDefination(gl, dstFuncName);\n      gl.blendFunc(src, dst);\n    }\n  }\n\n  if (viewport) {\n    gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\n  }\n\n  if (depthRange) {\n    gl.depthRange(depthRange[0], depthRange[1]);\n  }\n\n  if (scissor) {\n    if (scissor.enable === true) {\n      gl.enable(gl.SCISSOR_TEST);\n    } else if (scissor.enable === false) {\n      gl.disable(gl.SCISSOR_TEST);\n    }\n    const rect = scissor.rect;\n    if (rect) {\n      gl.scissor(rect[0], rect[1], rect[2], rect[3]);\n    }\n  }\n\n  // motivation: for render coplanar primitives\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  if (defined(polygonOffset)) {\n    if (polygonOffset.enable === true) {\n      gl.enable(gl.POLYGON_OFFSET_FILL);\n    } else if (polygonOffset.enable === false) {\n      gl.disable(gl.POLYGON_OFFSET_FILL);\n    } else {\n      console.warn('polygonOffset.enable MUST be either true or false, current is ' + polygonOffset.enable.toString() + '.');\n    }\n    // Offset value: o = m * factor + r * units,\n    // where m is maximum depth slope of a triangle,\n    // r is minimum resolvable difference, which is an implementation-dependent constant.\n    gl.polygonOffset(polygonOffset.factor, polygonOffset.units);\n  }\n\n  if (defined(sampleCoverage)) {\n    const { alphaToCoverage, value, invert, enable } = sampleCoverage;\n\n    if (alphaToCoverage === true) {\n      gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n    } else if (alphaToCoverage === false) {\n      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n    }\n\n    if (enable === true) {\n      gl.enable(gl.SAMPLE_COVERAGE);\n    } else if (enable === false) {\n      gl.disable(gl.SAMPLE_COVERAGE);\n    }\n\n    if (defined(value) && defined(invert)) {\n      if (invert !== true && invert !== false) {\n        console.warn('sampleCoverage.invert MUST be boolean.');\n      }\n      gl.sampleCoverage(value, invert);\n    }\n  }\n\n  if (defined(dither)) {\n    if (dither === true) {\n      gl.enable(gl.DITHER);\n    } else if (dither === false) {\n      gl.disable(gl.DITHER);\n    } else {\n      console.warn('setState: dither MUST be a boolean value, otherwise it will be ignored.');\n    }\n  }\n  \n}\n\nexport default setState;\n","const WebGLConstant = {\n  // ACTIVE_TEXTURE\n  34016: 'ACTIVE_TEXTURE',\n  33984: 'TEXTURE0',\n  33985: 'TEXTURE1',\n  33986: 'TEXTURE2',\n  33987: 'TEXTURE3',\n  33988: 'TEXTURE4',\n  33989: 'TEXTURE5',\n  33990: 'TEXTURE6',\n  33991: 'TEXTURE7',\n  33992: 'TEXTURE8',\n  33993: 'TEXTURE9',\n  33994: 'TEXTURE10',\n  33995: 'TEXTURE11',\n  33996: 'TEXTURE12',\n  33997: 'TEXTURE13',\n  33998: 'TEXTURE14',\n  33999: 'TEXTURE15',\n  34000: 'TEXTURE16',\n  34001: 'TEXTURE17',\n  34002: 'TEXTURE18',\n  34003: 'TEXTURE19',\n  34004: 'TEXTURE20',\n  34005: 'TEXTURE21',\n  34006: 'TEXTURE22',\n  34007: 'TEXTURE23',\n  34008: 'TEXTURE24',\n  34009: 'TEXTURE25',\n  34010: 'TEXTURE26',\n  34011: 'TEXTURE27',\n  34012: 'TEXTURE28',\n  34013: 'TEXTURE29',\n  34014: 'TEXTURE30',\n  34015: 'TEXTURE31',\n\n  3410: 'RED_BITS',\n  3411: 'GREEN_BITS',\n  3412: 'BLUE_BITS',\n  3413: 'ALPHA_BITS',\n\n  2884: 'CULL_FACE',\n  // cullFace\n  2885: 'CULL_FACE_MODE',\n  1028: 'FRONT',\n  1029: 'BACK',\n  1032: 'FRONT_AND_BACK',\n\n  // depthFunc, stencilFunc\n  512: 'NEVER',\n  513: 'LESS',\n  514: 'EQUAL',\n  515: 'LEQUAL',\n  516: 'GREATER',\n  517: 'NOTEQUAL',\n  518: 'GEQUAL',\n  519: 'ALWAYS',\n\n  // stencilOp(fail, zfail, zpass)\n  // stencilOpSeparate(face, fail, zfail, zpass)\n  0: 'ZERO', // blendFunc\n  1: 'ONE',\n  5386: 'INVERT',\n  7680: 'KEEP',\n  7681: 'REPLACE',\n  7682: 'INCR',\n  7683: 'DECR',\n  34055: 'INCR_WRAP',\n  34056: 'DECR_WRAP',\n\n  // blendEquationSeparate\n  32774: 'FUNC_ADD',\n  32778: 'FUNC_SUBTRACT',\n  32779: 'FUNC_REVERSE_SUBTRACT',\n\n  // blendFuncSeparate\n  768: 'SRC_COLOR',\n  770: 'SRC_ALPHA',\n  774: 'DST_COLOR',\n  772: 'DST_ALPHA',\n  32769: 'CONSTANT_COLOR',\n  32771: 'CONSTANT_ALPHA',\n\n  769: 'ONE_MINUS_SRC_COLOR',\n  771: 'ONE_MINUS_SRC_ALPHA',\n  775: 'ONE_MINUS_DST_COLOR',\n  773: 'ONE_MINUS_DST_ALPHA',\n  32770: 'ONE_MINUS_CONSTANT_COLOR',\n  32772: 'ONE_MINUS_CONSTANT_ALPHA',\n\n  // FRONT_FACE\n  2304: 'CW',\n  2305: 'CCW',\n\n  // hint\n  4352: 'DONT_CARE',\n  4353: 'FASTEST',\n  4354: 'NICEST',\n\n  // WEBGL_compressed_texture_s3tc\n  33776: 'COMPRESSED_RGB_S3TC_DXT1_EXT',\n  33777: 'COMPRESSED_RGBA_S3TC_DXT1_EXT',\n  33778: 'COMPRESSED_RGBA_S3TC_DXT3_EXT',\n  33779: 'COMPRESSED_RGBA_S3TC_DXT5_EXT',\n  // EXT_texture_compression_bptc\n  36492: 'COMPRESSED_RGBA_BPTC_UNORM_EXT',\n  36493: 'COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT',\n  36494: 'COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT',\n  36495: 'COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT',\n  // EXT_texture_compression_rgtc\n  36283: 'COMPRESSED_RED_RGTC1_EXT',\n  36284: 'COMPRESSED_SIGNED_RED_RGTC1_EXT',\n  36285: 'COMPRESSED_RED_GREEN_RGTC2_EXT',\n  36286: 'COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT',\n\n  // UNPACK_COLORSPACE_CONVERSION_WEBGL\n  37444: 'BROWSER_DEFAULT_WEBGL',\n\n};\n\nexport default WebGLConstant;\n","import defaultValue from './defaultValue.js';\n\nconst FRAMEBUFFER_STATUS = {\n  36053: 'FRAMEBUFFER_COMPLETE',\n  36054: 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',\n  36055: 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',\n  36057: 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',\n  36061: 'FRAMEBUFFER_UNSUPPORTED',\n};\n\n/**\n * Create a framebuffer.\n * @param {WebGLRenderingContext} gl \n * @param {Object} [options] \n * @param {WebGLTexture} [options.colorTexture] Single draw buffer.\n * @param {Array.<WebGLTexture>} [options.colorAttachments] If you want to draw multiply buffers, use this property.\n * @param {WebGLTexture} [options.depthTexture] Use depth texture\n * @param {WebGLRenderbuffer} [options.depthRenderbuffer] or depth renderbuffer\n * @returns {WebGLFramebuffer}\n */\nfunction createFramebuffer(gl, options) {\n  const { colorTexture, depthTexture, depthRenderbuffer } = options;\n  const colorAttachments = defaultValue(options.colorAttachments, [ colorTexture ])\n\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\n  // color\n  gl.activeTexture(gl.TEXTURE0);\n  const colorAttachmentsLength = colorAttachments.length;\n  if (colorAttachmentsLength > 1) {\n    const ext = gl.getExtension('WebGL_draw_buffers');\n    const drawBuffers = [];\n    for (let i = 0; i < colorAttachmentsLength; i++) {\n      drawBuffers.push(ext.COLOR_ATTACHMENT0_WEBGL + i);\n    }\n    ext.drawBuffersWEBGL(drawBuffers);\n\n    for (let i = 0; i < colorAttachmentsLength; i++) {\n      const colorAttachment = colorAttachments[i];\n      gl.bindTexture(gl.TEXTURE_2D, colorAttachment);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, colorAttachment, 0);\n    }\n  } else {\n    gl.bindTexture(gl.TEXTURE_2D, colorTexture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTexture, 0);\n  }\n  gl.bindTexture(gl.TEXTURE_2D, null);\n\n  // depth\n  if (depthTexture) {\n    gl.bindTexture(gl.TEXTURE_2D, depthTexture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture, 0);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  }\n  else if (depthRenderbuffer) {\n    const renderbuffer = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, depthRenderbuffer.width, depthRenderbuffer.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error('createFramebuffer: framebuffer combination is NOT completed! Current status is ' + FRAMEBUFFER_STATUS[status] + '.');\n  }\n\n  return fb;\n}\n\nexport default createFramebuffer;\n","function isPowerOfTwo(value) {\n  return (value & (value - 1)) === 0;\n}\n\nexport default isPowerOfTwo;\n","import defaultValue from './defaultValue.js';\n\nconst cachedBuffer = {};\n\nfunction isArrayBufferView(value) {\n  return value instanceof Float32Array ||\n         value instanceof Uint8Array ||\n         value instanceof Uint16Array ||\n         value instanceof Uint32Array ||\n         value instanceof Int8Array ||\n         value instanceof Int16Array ||\n         value instanceof Int32Array;\n}\n\nfunction getIndicesType(indices) {\n  let indicesType;\n\n  if (Array.isArray(indices)) {\n\n    indicesType = gl.UNSIGNED_SHORT;\n\n  } else if (indices instanceof Uint8Array) {\n\n    indicesType = gl.UNSIGNED_BYTE;\n\n  } else if (indices instanceof Uint16Array) {\n\n    indicesType = gl.UNSIGNED_SHORT;\n\n  } else if (indices instanceof Uint32Array) {\n\n    indicesType = gl.UNSIGNED_INT;\n\n  } else {\n    throw new Error('indices MUST be instance of Array, Uint8Array, Uint16Array or Uint32Array.');\n  }\n  return indicesType;\n}\n\nfunction createBuffer(gl, bufferTarget, source, usage) {\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(bufferTarget, buffer);\n  gl.bufferData(bufferTarget, source, usage);\n  gl.bindBuffer(bufferTarget, null);\n  return buffer;\n}\n\nfunction createAttributeBuffer(gl, typedArrayOrArray, usage) {\n  const bufferKey = typedArrayOrArray.toString();\n  let buffer = cachedBuffer[bufferKey];\n  if (buffer) {\n    return buffer;\n  }\n\n  usage = defaultValue(usage, gl.STATIC_DRAW);\n\n  let typedArray;\n  if (Array.isArray(typedArrayOrArray)) {\n    typedArray = new Float32Array(typedArrayOrArray);\n  } else if (isArrayBufferView(typedArrayOrArray)) {\n    typedArray = typedArrayOrArray;\n  } else {\n    throw new Error('Buffer data' + typedArrayOrArray + 'must be TypedArray or Array ');\n  }\n\n  buffer = createBuffer(gl, gl.ARRAY_BUFFER, typedArray, usage)\n  cachedBuffer[bufferKey] = buffer;\n  return buffer;\n}\n\nfunction createIndicesBuffer(gl, typedArrayOrArray, usage) {\n  const bufferKey = typedArrayOrArray.toString();\n  let buffer = cachedBuffer[bufferKey];\n  if (buffer) {\n    return buffer;\n  }\n\n  usage = defaultValue(usage, gl.STATIC_DRAW);\n\n  let typedArray;\n  const indicesType = getIndicesType(typedArrayOrArray);\n\n  if (indicesType === gl.UNSIGNED_BYTE) {\n\n    typedArray = new Uint8Array(typedArrayOrArray);\n\n  } else if (indicesType === gl.UNSIGNED_SHORT) {\n\n    typedArray = new Uint16Array(typedArrayOrArray);\n\n  } else if (indicesType === gl.UNSIGNED_INT) {\n\n    typedArray = new Uint32Array(typedArrayOrArray);\n    gl.getExtension('OES_element_index_unit');\n\n  } else {\n    throw new Error('Buffer data must be TypedArray or Array ');\n  }\n\n  buffer = createBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, typedArray, usage);\n  cachedBuffer[bufferKey] = buffer;\n  return buffer;\n}\n\nexport {\n  cachedBuffer,\n  createAttributeBuffer,\n  createIndicesBuffer,\n  getIndicesType,\n};\n","import isArrayLike from './isArrayLike.js';\nimport defaultValue from './defaultValue.js';\nimport {\n  createProgram,\n} from './glUtils.js';\nimport defined from './defined.js';\nimport {\n  createAttributeBuffer,\n  createIndicesBuffer,\n  getIndicesType,\n} from './buffer.js';\n\nconst cachedProgram = {};\nconst cachedTextures = {};\n\nfunction getNumberOfComponentsByType(type) {\n  let numberOfComponents = 0;\n\n  switch (type) {\n    case 5126: // gl.FLOAT\n      numberOfComponents = 1;\n      break;\n    case 35664: // gl.FLOAT_VEC2\n      numberOfComponents = 2;\n      break;\n    case 35665: // gl.FLOAT_VEC3\n      numberOfComponents = 3;\n      break;\n    case 35666: // gl.FLOAT_VEC4\n      numberOfComponents = 4;\n      break;\n    default:\n      throw new Error('Unrecognize ' + type + ' type.');\n  }\n  return numberOfComponents;\n}\n\nfunction getAttributeSize(activeAttribute) {\n  const { name, size, type } = activeAttribute;\n  let s = 0;\n  switch (type) {\n    case 5126: // gl.FLOAT\n      s = size * 1;\n      break;\n    case 35664: // gl.FLOAT_VEC2\n      s = 2 * size;\n      break;\n    case 35665: // gl.FLOAT_VEC3\n      s = 3 * size;\n      break;\n    case 35666: // gl.FLOAT_VEC4\n      s = 4 * size;\n      break;\n    case 35674: // gl.FLOAT_MAT2\n      s = 4 * size;\n      break;\n    case 35675: // gl.FLOAT_MAT3\n      s = 9 * size;\n      break;\n    case 35676: // gl.FLOAT_MAT4\n      s = 16 * size;\n      break;\n    default:\n      console.warn(`Can not recognize attribute ${name} type, current type is ${type}`);\n  }\n\n  return s;\n}\n\n/**\n * Execute a draw command.\n * @param {WebGLRenderingContext} gl \n * @param {Object} options \n * @param {String} options.vs Vertex shader text\n * @param {String} options.fs Fragment shader text\n * @param {Object} [options.attributes] use <code>attributes</code> or <code>vao</code> property.\n * @param {WebGLVertexArrayObjectOES} [options.vao] @see {@link createVAO}\n * @param {Object} [options.attributeLocations] If you define <code>vao</code> property, in order to correspond to attribute location of VAO, you must specify the location for the vertex attribute of shader program.\n * @param {Object} [options.uniforms] The key of object is uniform name, value can be string(texture image file path), number, Array, ArrayBufferView. Uniform array is supported.\n * @param {Array | Uint8Array | Uint16Array | Uint32Array} [options.indices] Vertex indices, when using an Array, it is treated as Uint16Array, so if the maximum value of indices is greater then 65535, Uint32Array MUST be used.\n * @param {Number} [options.count=indices.length] The number of vertices.\n * @param {Number} [options.primitiveType=gl.TRIANGLES] Primitive type. <code>gl.LINES</code>, <code>gl.POINTS</code>.\n * @param {WebGLFramebuffer | null} [options.fb=null] See {@link createFramebuffer}.\n */\nfunction draw(gl, options) {\n  const {\n    attributes,\n    indices,\n    vao,\n    vs: vsSource,\n    fs: fsSource,\n    attributeLocations,\n    fb\n  } = options;\n\n  let count = options.count;\n  if (!defined(count) && defined(indices)) {\n    count = indices.length;\n  }\n  if (!defined(count)) {\n    throw new Error('vertices count or indices is not defined.');\n  }\n\n  if (defined(vao) && !defined(attributeLocations)) {\n    throw new Error('To use vao, you must defined attributeLocations.');\n  }\n\n  const primitiveType = defaultValue(options.primitiveType, gl.TRIANGLES);\n  const uniforms = defaultValue(options.uniforms, defaultValue.EMPTY_OBJECT);\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\n  const key = vsSource + fsSource;\n  let program = cachedProgram[key];\n  if (!program) {\n    program = createProgram(gl, vsSource, fsSource, attributeLocations);\n    cachedProgram[key] = program;\n  }\n\n  gl.useProgram(program);\n\n  // attributes\n  const numberOfAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n  const extVAO = gl.getExtension('OES_vertex_array_object');\n  if (defined(vao)) {\n    if (extVAO) {\n      extVAO.bindVertexArrayOES(vao);\n    } else if (gl instanceof WebGL2RenderingContext) {\n      gl.bindVertexArray(vao);\n    } else {\n      throw new Error('this branch never should be executed.');\n    }\n\n  } else if (defined(attributes)) {\n    if (extVAO) {\n      extVAO.bindVertexArrayOES(null);\n    }\n\n    for (let i = 0; i < numberOfAttributes; i++) {\n      const activeAttribute = gl.getActiveAttrib(program, i);\n      const attributeName = activeAttribute.name;\n\n      if (Object.hasOwnProperty.call(attributes, attributeName)) {\n        const attribute = attributes[attributeName];\n        const attribLocation = gl.getAttribLocation(program, attributeName);\n\n        if (attribLocation === -1) {\n          continue;\n        }\n\n        const size = getAttributeSize(activeAttribute);\n        const buffer = createAttributeBuffer(gl, attribute, gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.enableVertexAttribArray(attribLocation);\n        gl.vertexAttribPointer(\n          attribLocation,\n          size,\n          gl.FLOAT,\n          false,\n          0,\n          0\n        );\n\n      }\n    }\n  } else {\n    throw new Error('vao or attributes must be defined.')\n  }\n\n  // uniforms\n  const numberOfUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n  const maximumTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  let currentTextureUnit = 0;\n  for (let i = 0; i < numberOfUniforms; i++) {\n    const activeUniform = gl.getActiveUniform(program, i);\n    let uniformName = activeUniform.name;\n    let isUniformArray = false;\n\n    const indexOfBracket = uniformName.indexOf('[');\n    if (indexOfBracket >= 0) {\n      // \"u_xxx[0]\" => \"u_xxx\"\n      uniformName = uniformName.slice(0, indexOfBracket);\n      isUniformArray = true;\n    }\n    \n    if (Object.hasOwnProperty.call(uniforms, uniformName)) {\n      const uniform = uniforms[uniformName];\n      const uniformLocation = gl.getUniformLocation(program, uniformName);\n\n      if (uniformLocation === null) {\n        continue;\n      }\n\n      // support float, vec[234] uniform array\n      if (isUniformArray) {\n        const type = activeUniform.type;\n        const numberOfComponents = getNumberOfComponentsByType(type);\n\n        gl['uniform' + numberOfComponents + 'fv'](uniformLocation, Array.from(uniform));\n        continue;\n      }\n\n      const typeOfUniform = typeof uniform;\n      const textureUnit = gl.TEXTURE0 + currentTextureUnit;\n      if (uniform instanceof WebGLTexture) {\n        gl.activeTexture(textureUnit);\n\n        if (activeUniform.type === gl.SAMPLER_2D) {\n          gl.bindTexture(gl.TEXTURE_2D, uniform);\n        } else if (activeUniform.type === gl.SAMPLER_CUBE) {\n          gl.bindTexture(gl.TEXTURE_CUBE_MAP, uniform);\n        } else {\n          throw new Error(activeUniform, 'type MUST be SAMPLER_2D or SAMPLER_CUBE');\n        }\n\n        gl.uniform1i(uniformLocation, currentTextureUnit);\n        currentTextureUnit++;\n      } else if (isArrayLike(uniform)) {\n        const size = uniform.length;\n        if (size <= 4) {\n          gl['uniform' + size + 'fv' ](uniformLocation, uniform);\n        } else if (size <= 16) {\n          const order = Math.floor(Math.sqrt(size));\n          const transpose = false; // MUST be false\n          gl['uniformMatrix' + order + 'fv'](uniformLocation, transpose, Array.from(uniform));\n        }\n      } else if (typeOfUniform === 'number') {\n        gl.uniform1f(uniformLocation, uniform);\n      } else if (typeOfUniform === 'string') {\n\n        if (currentTextureUnit > maximumTextureUnits) {\n          console.error('texture exceed maximum texture units.');\n          continue;\n        }\n\n        let texture = cachedTextures[uniform];\n\n        if (!texture) {\n          texture = gl.createTexture();\n          gl.activeTexture(textureUnit);\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255, 255]));\n          const image = new Image();\n          image.src = uniform;\n          image.addEventListener('load', () => {\n            gl.activeTexture(textureUnit);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n          });\n\n          cachedTextures[uniform] = texture;\n        }\n\n        gl.activeTexture(textureUnit);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.uniform1i(uniformLocation, currentTextureUnit);\n\n        currentTextureUnit++;\n      }\n    }\n  }\n\n  // draw\n  const hasBoundElementArrayBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\n  if (indices && indices.length > 0) {\n    const buffer = createIndicesBuffer(gl, indices, gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n\n    const indicesType = getIndicesType(indices);\n    gl.drawElements(primitiveType, count, indicesType, 0);\n  } else if (hasBoundElementArrayBuffer) {\n    gl.drawElements(primitiveType, count, gl.UNSIGNED_SHORT, 0);\n  } else {\n    gl.drawArrays(primitiveType, 0, count);\n  }\n\n};\n\nexport default draw;\n","import createContext from './createContext.js';\nimport setState from './setState.js';\nimport getState from './getState.js';\nimport createFramebuffer from './createFramebuffer.js';\nimport createTexture from './createTexture.js';\nimport updateTexture from './updateTexture.js';\nimport createCubeMap from './createCubeMap.js';\nimport createVAO from './createVAO.js';\nimport clear from './clear.js';\nimport draw from './draw.js';\n\nconst ToyGL = {\n  createContext,\n  setState,\n  getState,\n  clear,\n  draw,\n  createTexture,\n  updateTexture,\n  createCubeMap,\n  createVAO,\n  createFramebuffer,\n};\n\nexport default ToyGL;\n","import WebGLConstant from './WebglConstant.js';\n\n/**\n * Get inner render state and GL limitation.\n * @param {WebGLRenderingContext} gl \n * @returns {Object}\n */\nfunction getState(gl) {\n  // cull face-related state\n  const cullFaceEnabled = gl.getParameter(gl.CULL_FACE);\n  const cullFaceMode = gl.getParameter(gl.CULL_FACE_MODE);\n  \n  // stencil-related state\n  const depthTestEnabled = gl.getParameter(gl.DEPTH_TEST);\n  const depthClearValue = gl.getParameter(gl.DEPTH_CLEAR_VALUE);\n  const depthFunc = gl.getParameter(gl.DEPTH_FUNC);\n  const depthWritemask = gl.getParameter(gl.DEPTH_WRITEMASK);\n  const depthRange = gl.getParameter(gl.DEPTH_RANGE);\n  const depthBits = gl.getParameter(gl.DEPTH_BITS);\n\n  const stencilTestEnabled = gl.getParameter(gl.STENCIL_TEST);\n  const stencilClearValue = gl.getParameter(gl.STENCIL_CLEAR_VALUE);\n\n  const stencilRef = gl.getParameter(gl.STENCIL_REF);\n  const stencilFunc = gl.getParameter(gl.STENCIL_FUNC);\n  const stencilFail = gl.getParameter(gl.STENCIL_FAIL);\n  const stencilPassDepthFail = gl.getParameter(gl.STENCIL_PASS_DEPTH_FAIL);\n  const stencilPassDepthPass = gl.getParameter(gl.STENCIL_PASS_DEPTH_PASS);\n  const stencilValueMask = gl.getParameter(gl.STENCIL_VALUE_MASK);\n  const stencilWritemask = gl.getParameter(gl.STENCIL_WRITEMASK);\n\n  const stencilBackRef = gl.getParameter(gl.STENCIL_BACK_REF);\n  const stencilBackFunc = gl.getParameter(gl.STENCIL_BACK_FUNC);\n  // what action is taken for back-facing polygons when the stencil test fails. Initial value is KEEP\n  const stencilBackFail = gl.getParameter(gl.STENCIL_BACK_FAIL);\n  const stencilBackPassDepthFail = gl.getParameter(gl.STENCIL_BACK_PASS_DEPTH_FAIL);\n  const stencilBackPassDepthPass = gl.getParameter(gl.STENCIL_BACK_PASS_DEPTH_PASS);\n  const stencilBackValueMask = gl.getParameter(gl.STENCIL_BACK_VALUE_MASK);\n  const stencilBackWritemask = gl.getParameter(gl.STENCIL_BACK_WRITEMASK);\n\n  const stencilBits = gl.getParameter(gl.STENCIL_BITS);\n\n  // blend\n  const blendEnable = gl.getParameter(gl.BLEND);\n  // blendColor\n  const blendColor = gl.getParameter(gl.BLEND_COLOR);\n  // blendFuncSeparate\n  const blendDstRGB = gl.getParameter(gl.BLEND_DST_RGB);\n  const blendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\n  const blendSrcRGB = gl.getParameter(gl.BLEND_SRC_RGB);\n  const blendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\n  // blendEquationSeparate\n  const blendEquationRGB = gl.getParameter(gl.BLEND_EQUATION_RGB);\n  const blendEquationAlpha = gl.getParameter(gl.BLEND_EQUATION_ALPHA);\n\n  // viewport\n  const currentViewport = gl.getParameter(gl.VIEWPORT);\n  const maxViewportDims = gl.getParameter(gl.MAX_VIEWPORT_DIMS);\n\n  const scissorTestEnable = gl.getParameter(gl.SCISSOR_TEST);\n  const scissorBox = gl.getParameter(gl.SCISSOR_BOX);\n\n  // polygon offset fill\n  const polygonOffsetFillEnable = gl.getParameter(gl.POLYGON_OFFSET_FILL);\n  const polygonOffsetFactor = gl.getParameter(gl.POLYGON_OFFSET_FACTOR);\n  const polygonOffsetUnits = gl.getParameter(gl.POLYGON_OFFSET_UNITS);\n\n  const ditherEnable = gl.getParameter(gl.DITHER);\n\n  // \n  const redBits = gl.getParameter(gl.RED_BITS);\n  const greenBits = gl.getParameter(gl.GREEN_BITS);\n  const blueBits = gl.getParameter(gl.BLUE_BITS);\n  const alphaBits = gl.getParameter(gl.ALPHA_BITS);\n  const subpixelBits = gl.getParameter(gl.SUBPIXEL_BITS);\n\n  const aliasedLineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE);\n  const aliasedPointSizeRange = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n\n  // color write mask\n  const colorWritemask = gl.getParameter(gl.COLOR_WRITEMASK);\n  const colorClearValue = gl.getParameter(gl.COLOR_CLEAR_VALUE);\n\n  // texture-related state\n  const activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);\n  // The maximum number of texture image units available to the fragment stage of the GL\n  const maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  // Both the vertex shader and fragment processing combined cannot use more than MAX_COMBINED_TEXTURE_IMAGE_UNITS texture image units.\n  const maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n  const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  const maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n  const maxRenderbuffereSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\n\n  // \n  const maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  // The maximum number of texture image units available to a vertex shader\n  const maxVertexTextureImageUnits = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n  const maxVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n  const maxVaryingVectors = gl.getParameter(gl.MAX_VARYING_VECTORS);\n\n  // gl.pixelStorei(pname, param)\n  const packAlignment = gl.getParameter(gl.PACK_ALIGNMENT);\n  const unpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  const unpackColorspaceConversionWebgl = gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL)\n  const unpackFlipYWebgl = gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);\n  const unpackPremultiplyAlphaWebgl = gl.getParameter(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL);\n\n  // \n  const vendor = gl.getParameter(gl.VENDOR); \n  const version = gl.getParameter(gl.VERSION); \n\n  // Uint32Array\n  const compressedTextureFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);\n\n  // binding\n  const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n  const arrayBufferBinding = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n  const elementArrayBufferBinding = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\n  const framebufferBinding = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n  const renderbufferBinding = gl.getParameter(gl.RENDERBUFFER_BINDING);\n  const textureBinding2D = gl.getParameter(gl.TEXTURE_BINDING_2D);\n  const textureBindingCubeMap = gl.getParameter(gl.TEXTURE_BINDING_CUBE_MAP);\n  const renderer = gl.getParameter(gl.RENDERER);\n\n  // sample coverage\n  const samples = gl.getParameter(gl.SAMPLES);\n  const sampleBuffers = gl.getParameter(gl.SAMPLE_BUFFERS);\n  const sampleAlphaToCoverage = gl.getParameter(gl.SAMPLE_ALPHA_TO_COVERAGE);\n  const sampleCoverageInvert = gl.getParameter(gl.SAMPLE_COVERAGE_INVERT);\n  const sampleConverageValue =  gl.getParameter(gl.SAMPLE_COVERAGE_VALUE);\n\n  const frontFaceOrder = gl.getParameter(gl.FRONT_FACE);\n\n  const lineWidth = gl.getParameter(gl.LINE_WIDTH);\n\n  const generateMipmapHint = gl.getParameter(gl.GENERATE_MIPMAP_HINT);\n\n  const shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n\n\n  return {\n    cullFace: {\n      CULL_FACE: cullFaceEnabled,\n      CULL_FACE_MODE: WebGLConstant[cullFaceMode],\n    },\n    depth: {\n      DEPTH_TEST: depthTestEnabled,\n      DEPTH_CLEAR_VALUE: depthClearValue,\n      DEPTH_FUNC: WebGLConstant[depthFunc],\n      DEPTH_WRITEMASK: depthWritemask,\n      DEPTH_RANGE: depthRange,\n      DEPTH_BITS: depthBits,\n    },\n    stencil: {\n      STENCIL_TEST: stencilTestEnabled,\n      STENCIL_CLEAR_VALUE: stencilClearValue,\n      STENCIL_BITS: stencilBits,\n      front: {\n        STENCIL_REF: stencilRef,\n        STENCIL_FUNC: WebGLConstant[stencilFunc],\n        STENCIL_FAIL: WebGLConstant[stencilFail],\n        STENCIL_PASS_DEPTH_FAIL: WebGLConstant[stencilPassDepthFail],\n        STENCIL_PASS_DEPTH_PASS: WebGLConstant[stencilPassDepthPass],\n        STENCIL_VALUE_MASK: Number(stencilValueMask).toString(16),\n        STENCIL_WRITEMASK: Number(stencilWritemask).toString(16),\n      },\n      back: {\n        STENCIL_BACK_REF: stencilBackRef,\n        STENCIL_BACK_FUNC: WebGLConstant[stencilBackFunc],\n        STENCIL_BACK_FAIL: WebGLConstant[stencilBackFail],\n        STENCIL_BACK_PASS_DEPTH_FAIL: WebGLConstant[stencilBackPassDepthFail],\n        STENCIL_BACK_PASS_DEPTH_PASS: WebGLConstant[stencilBackPassDepthPass],\n        STENCIL_BACK_VALUE_MASK: Number(stencilBackValueMask).toString(16),\n        STENCIL_BACK_WRITEMASK: Number(stencilBackWritemask).toString(16),  \n      },\n    },\n    blend: {\n      BLEND: blendEnable,\n      BLEND_COLOR: blendColor,\n      BLEND_DST_RGB: WebGLConstant[blendDstRGB],\n      BLEND_DST_ALPHA: WebGLConstant[blendDstAlpha],\n      BLEND_SRC_RGB: WebGLConstant[blendSrcRGB],\n      BLEND_SRC_ALPHA: WebGLConstant[blendSrcAlpha],\n      BLEND_EQUATION_RGB: WebGLConstant[blendEquationRGB],\n      BLEND_EQUATION_ALPHA: WebGLConstant[blendEquationAlpha],\n    },\n    viewport: {\n      VIEWPORT: currentViewport,\n      MAX_VIEWPORT_DIMS: maxViewportDims,\n    },\n    scissor: {\n      SCISSOR_TEST: scissorTestEnable,\n      SCISSOR_BOX: scissorBox,\n    },\n    polygonOffset: {\n      POLYGON_OFFSET_FILL: polygonOffsetFillEnable,\n      POLYGON_OFFSET_FACTOR: polygonOffsetFactor,\n      POLYGON_OFFSET_UNITS: polygonOffsetUnits,\n    },\n    DITHER: ditherEnable,\n\n    binding: {\n      ARRAY_BUFFER_BINDING: arrayBufferBinding,\n      ELEMENT_ARRAY_BUFFER_BINDING: elementArrayBufferBinding,\n      CURRENT_PROGRAM: currentProgram,\n      FRAMEBUFFER_BINDING: framebufferBinding,\n      RENDERBUFFER_BINDING: renderbufferBinding,\n      TEXTURE_BINDING_2D: textureBinding2D,\n      TEXTURE_BINDING_CUBE: textureBindingCubeMap,\n    },\n    RENDERER: renderer,\n\n    color: {\n      RED_BITS: redBits,\n      GREEN_BITS: greenBits,\n      BLUE_BITS: blueBits,\n      ALPHA_BITS: alphaBits,\n      SUBPIXEL_BITS: subpixelBits,\n      COLOR_CLEAR_VALUE: colorClearValue,\n      COLOR_WRITEMASK: colorWritemask,\n    },\n    aliasedRange: {\n      ALIASED_LINE_WIDTH_RANGE : aliasedLineWidthRange,\n      ALIASED_POINT_SIZE_RANGE: aliasedPointSizeRange,\n    },\n    texture: {\n      MAX_TEXTURE_IMAGE_UNITS: maxTextureImageUnits,\n      MAX_COMBINED_TEXTURE_IMAGE_UNITS: maxCombinedTextureImageUnits,\n      ACTIVE_TEXTURE: WebGLConstant[activeTexture],\n      MAX_TEXTURE_SIZE: maxTextureSize,\n      MAX_CUBE_MAP_TEXTURE_SIZE: maxCubeMapTextureSize,\n      MAX_RENDERBUFFER_SIZE: maxRenderbuffereSize,\n    },\n    COMPRESSED_TEXTURE_FORMATS: Array.from(compressedTextureFormats).map(format => WebGLConstant[format]),\n    // numCompressedTextureFormats,\n\n    GENERATE_MIPMAP_HINT: WebGLConstant[generateMipmapHint],\n    LINE_WIDTH: lineWidth,\n    FRONT_FACE: WebGLConstant[frontFaceOrder],\n\n    SHADING_LANGUAGE_VERSION: shadingLanguageVersion,\n    vertex: {\n      MAX_VERTEX_ATTRIBS: maxVertexAttribs,\n      MAX_VERTEX_TEXTURE_IMAGE_UNITS: maxVertexTextureImageUnits,\n      MAX_VERTEX_UNIFORM_VECTORS: maxVertexUniformVectors,\n      MAX_VARYING_VECTORS: maxVaryingVectors\n    },\n    sample: {\n      SAMPLES: samples,\n      SAMPLE_BUFFERS: sampleBuffers,\n      SAMPLE_ALPHA_TO_COVERAGE: sampleAlphaToCoverage,\n      SAMPLE_COVERAGE_VALUE: sampleConverageValue,\n      SAMPLE_COVERAGE_INVERT: sampleCoverageInvert\n    },\n    unpack: {\n      PACK_ALIGNMENT: packAlignment,\n      UNPACK_ALIGNMENT: unpackAlignment,\n      UNPACK_FLIP_Y_WEBGL: unpackFlipYWebgl,\n      UNPACK_PREMULTIPLY_ALPHA_WEBGL: unpackPremultiplyAlphaWebgl,\n      UNPACK_COLORSPACE_CONVERSION_WEBGL: WebGLConstant[unpackColorspaceConversionWebgl],\n    },\n    VENDOR: vendor,\n    VERSION: version,\n  };\n}\n\nexport default getState;\n","import defined from './defined.js';\nimport defaultValue from './defaultValue.js';\n\n/**\n * Execute a clear command.\n * @param {WebGLRenderingContext} gl \n * @param {Object} [options] \n * @param {Array} [options.color] 4 element of Array, [red, green, blue, alpha], value between 0 and 1.\n * @param {Number} [options.depth] clear depth buffer to\n * @param {Number} [options.stencil] clear stencil buffer to\n * @param {WebGLFramebuffer | null} [options.fb] The framebuffer to clear.\n */\nfunction clear(gl, options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const { fb, color, depth, stencil } = options;\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\n  let mask = 0;\n  if (color) {\n    gl.clearColor(color[0], color[1], color[2], color[3]);\n    mask |= gl.COLOR_BUFFER_BIT;\n  }\n  if (defined(depth)) {\n    gl.clearDepth(depth);\n    mask |= gl.DEPTH_BUFFER_BIT;\n  }\n  if (stencil) {\n    gl.clearStencil(stencil);\n    mask |= gl.STENCIL_BUFFER_BIT;\n  }\n\n  if (mask !== 0) {\n    gl.clear(mask);\n  }\n}\n\nexport default clear;\n","// see https://stackoverflow.com/questions/24048547/checking-if-an-object-is-array-like\nfunction isArrayLike(item) {\n  return (\n    Array.isArray(item) || \n    (!!item &&\n      typeof item === \"object\" &&\n      typeof (item.length) === \"number\" && \n      (item.length === 0 ||\n        (item.length > 0 && \n        (item.length - 1) in item)\n      )\n    )\n  );\n}\n\nexport default isArrayLike;\n","import isPowerOfTwo from './isPowerOfTwo.js';\nimport defined from './defined.js';\nimport defaultValue from './defaultValue.js';\n\n/**\n * Create a WebGLTexture.\n * @memberof ToyGL\n * @param {WebGLRenderingContext} gl \n * @param {Object} options \n * @param {Array.<ArrayBufferView | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement>} options.levels all levels data\n * @param {ArrayBufferView | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} options.data level 0 data\n * @param {Number} options.width\n * @param {Number} options.height\n * @param {Number} options.internalFormat For WebGL1, internal format must same with format.\n * @param {Number} options.format\n * @param {Number} options.type Texel data type, such as <code>gl.UNSIGNED_BYTE</code>, <code>gl.FLOAT</code>, <code>gl.UNSIGNED_INT</code>.\n * @param {Boolean} [options.generateMipmap=false]\n * @param {Number} [options.wrapS=CLAMP_TO_EDGE]\n * @param {Number} [options.wrapT=CLAMP_TO_EDGE]\n * @param {Number} [options.minFilter=LINEAR]\n * @param {Number} [options.magFilter=LINEAR]\n * @returns {WebGLTexture}\n */\nfunction createTexture(gl, options) {\n  const { internalFormat, type, format, width, height, data, generateMipmap } = options;\n\n  const wrapS = defaultValue(options.wrapS, gl.CLAMP_TO_EDGE);\n  const wrapT = defaultValue(options.wrapT, gl.CLAMP_TO_EDGE);\n  const minFilter = defaultValue(options.minFilter, gl.LINEAR);\n  const magFilter = defaultValue(options.magFilter, gl.LINEAR);\n\n  let levels = options.levels;\n  if (!levels) {\n    levels = [ data ];\n  }\n\n  const texture = gl.createTexture();\n\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  if (internalFormat === gl.DEPTH_COMPONENT || gl.DEPTH_STENCIL) {\n    gl.getExtension('WEBGL_depth_texture');\n  }\n\n  if (type === gl.FLOAT) {\n    gl.getExtension('OES_texture_float');\n    if (minFilter === gl.LINEAR ||\n      minFilter === gl.LINEAR_MIPMAP_NEAREST ||\n      minFilter === gl.NEAREST_MIPMAP_LINEAR ||\n      minFilter === gl.LINEAR_MIPMAP_LINEAR\n      ) {\n      gl.getExtension('OES_texture_float_linear');\n    }\n  }\n\n  const numberOfLevels = levels.length;\n  for (let level = 0; level < numberOfLevels; level++) {\n    const levelData = levels[level];\n\n    if (\n      levelData instanceof HTMLImageElement ||\n      levelData instanceof HTMLCanvasElement ||\n      levelData instanceof HTMLVideoElement\n    ) {\n      gl.texImage2D(gl.TEXTURE_2D, level, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, levelData);\n    } else {\n      const border = 0;\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, levelData);\n    }\n  }\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n\n  if (generateMipmap === true) {\n    if (isPowerOfTwo(width) && isPowerOfTwo(height)) {\n      gl.generateMipmap(gl.TEXTURE_2D);\n    } else {\n      console.warn('createTexture: texture size is NOT power of two, current is ' + width + 'x' + height + '.');\n    }\n  }\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n\n  return texture;\n}\n\nexport default createTexture;\n","import defaultValue from \"./defaultValue\";\n\n/**\n * Update an texture, usually used for video texture.\n * @param {WebGLRenderingContext} gl \n * @param {WebGLTexture} texture \n * @param {Object | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} source When it is a object, it includes properties as below.\n * @param {Number} source.width \n * @param {Number} source.height \n * @param {TypedArray} source.arrayBufferView \n * @param {Number} [source.level=0] \n * @param {Number} [source.internalFormat=gl.RGBA] \n * @param {Number} [source.format=gl.RGBA] \n * @param {Number} [source.type=gl.UNSIGNED_BYTE] \n * @returns {WebGLTexture}\n */\nfunction updateTexture(gl, texture, source) {\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  if (source instanceof HTMLImageElement ||\n    source instanceof HTMLCanvasElement ||\n    source instanceof HTMLVideoElement) {\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, videoElem);\n  } else {\n\n    const { width, height, arrayBufferView } = source;\n    const level = defaultValue(source.level, 0);\n    const internalFormat = defaultValue(source.internalFormat, gl.RGBA);\n    const format = defaultValue(source.format, gl.RGBA);\n    const type = defaultValue(source.internalFormat, gl.UNSIGNED_BYTE);\n    const border = 0;\n\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, arrayBufferView);\n  }\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  return texture;\n}\n\nexport default updateTexture;\n","import defaultValue from './defaultValue.js';\n\n/**\n * \n * @param {*} gl \n * @param {*} options \n * @returns {WebGLTexture}\n */\nfunction createCubeMap(gl, options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const level = defaultValue(options.level, 0);\n  const data = options.data;\n  const width = options.width;\n  const height = options.height;\n  const format = defaultValue(options.format, gl.RGBA);\n  const type = defaultValue(options.type, gl.UNSIGNED_BYTE);\n  const internalFormat = defaultValue(options.internalFormat, gl.RGBA);\n\n  const texture = gl.createTexture();\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n\n  const faces = [\n    {\n      target: gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n      data: data.px,\n    },\n    {\n      target: gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n      data: data.nx,\n    },\n    {\n      target: gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n      data: data.py,\n    },\n    {\n      target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      data: data.ny,\n    },\n    {\n      target: gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n      data: data.pz,\n    },\n    {\n      target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\n      data: data.nz,\n    },\n  ]\n  \n  for (let i = 0; i < 6; i++) {\n    const face = faces[i];\n    const target = face.target;\n    const bufferView = face.data;\n    if (bufferView instanceof HTMLImageElement) {\n      gl.texImage2D(target, level, internalFormat, format, type, bufferView);\n    } else {\n      gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, bufferView);\n    }\n\n    // default texture settings\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n  }\n\n  gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n\n  return texture;\n}\n\nexport default createCubeMap;\n","import { createAttributeBuffer, createIndicesBuffer } from \"./buffer.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Create a vertex array object. You can imagine it like this\n * <pre>\n * var glState = {\n *   attributeState: {\n *     ELEMENT_ARRAY_BUFFER: null,\n *     attributes: [\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\n *       { enable: ?, size: ?, type: ?, normalize: ?, stride: ?, offset: ?, buffer: ?, },\n *     ],\n *   },\n * </pre>\n * @param {WebGLRenderingContext|WebGL2RenderingContext} gl \n * @param {Object} options \n * @param {Object} options.attributes The key of Object is vertex attribute name, value is a Object, it includes <code>location</code>, <code>size</code> and <code>data</code> property, for example:\n * <pre>\n * {\n *   a_pos: {\n *     location: 0,\n *     size: 3,\n *     data: [\n *       0, 0, 0,\n *       1, 1, 1,\n *       0, 1, 0,\n *     ]\n *   }\n * }\n * </pre>\n * @param {Object} options.indices ELEMENT_ARRAY_BUFFER of vertex array.\n * @returns {WebGLVertexArrayObjectOES}\n */\nfunction createVAO(gl, options) {\n  let ext;\n  let vao;\n\n  if (gl instanceof WebGLRenderingContext) {\n    ext = gl.getExtension('OES_vertex_array_object');\n    if (!ext) {\n      throw new Error('Your device does not support VAO(OES_vertex_array_object extension), try to use vertex attributes.');\n    }\n\n    vao = ext.createVertexArrayOES();\n    ext.bindVertexArrayOES(vao);\n  } else if (gl instanceof WebGL2RenderingContext) {\n    vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n  } else {\n    throw new Error('gl MUST be instance of WebGLRenderingContext or WebGL2RenderingContext.');\n  }\n\n  const attributes = options.attributes;\n  const indices = options.indices;\n\n  for (const attributeName in attributes) {\n    if (Object.hasOwnProperty.call(attributes, attributeName)) {\n      const { location, data, size } = attributes[attributeName];\n\n      const buffer = createAttributeBuffer(gl, data, gl.STATIC_DRAW);\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.enableVertexAttribArray(location);\n\n      const type = gl.FLOAT;\n      const normalized = false;\n      const stride = 0;\n      const offset = 0;\n      gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n    }\n  }\n\n  if (defined(indices)) {\n    const indicesBuffer = createIndicesBuffer(gl, indices, gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);\n  }\n\n  if (gl instanceof WebGLRenderingContext) {\n    ext.bindVertexArrayOES(null);\n  } else if (gl instanceof WebGL2RenderingContext) {\n    gl.bindVertexArray(null);\n  }\n\n  return vao;\n}\n\nexport default createVAO;"],"names":["defined","a","validateStencilOp","op","toUpperCase","validateGLConstantDefination","gl","constantName","constant","Error","defaultValue","value","fallbackValue","EMPTY_OBJECT","Object","freeze","global","window","applyStencilStateSeparate","face","state","writeMask","stencilMaskSeparate","func","ref","valueMask","validateStencilFunc","stencilFuncSeparate","fail","zfail","zpass","stencilOpSeparate","WebGLConstant","34016","33984","33985","33986","33987","33988","33989","33990","33991","33992","33993","33994","33995","33996","33997","33998","33999","34000","34001","34002","34003","34004","34005","34006","34007","34008","34009","34010","34011","34012","34013","34014","34015","3410","3411","3412","3413","2884","2885","1028","1029","1032","512","513","514","515","516","517","518","519","0","1","5386","7680","7681","7682","7683","34055","34056","32774","32778","32779","768","770","774","772","32769","32771","769","771","775","773","32770","32772","2304","2305","4352","4353","4354","33776","33777","33778","33779","36492","36493","36494","36495","36283","36284","36285","36286","37444","FRAMEBUFFER_STATUS","36053","36054","36055","36057","36061","isPowerOfTwo","cachedBuffer","getIndicesType","indices","indicesType","Array","isArray","UNSIGNED_SHORT","Uint8Array","UNSIGNED_BYTE","Uint16Array","Uint32Array","UNSIGNED_INT","createBuffer","bufferTarget","source","usage","buffer","bindBuffer","bufferData","createAttributeBuffer","typedArrayOrArray","bufferKey","toString","typedArray","STATIC_DRAW","Float32Array","Int8Array","Int16Array","Int32Array","ARRAY_BUFFER","createIndicesBuffer","getExtension","ELEMENT_ARRAY_BUFFER","cachedProgram","cachedTextures","getNumberOfComponentsByType","type","numberOfComponents","getAttributeSize","activeAttribute","name","size","s","console","warn","createContext","contextOptions","canvas","document","createElement","style","width","height","setProperty","innerWidth","innerHeight","requireWebgl2","getContext","setState","cull","depthTest","stencilTest","colorMask","blend","viewport","depthRange","scissor","polygonOffset","sampleCoverage","dither","enable","CULL_FACE","disable","cullFace","frontFace","DEPTH_TEST","depthFunc","write","depthMask","STENCIL_TEST","front","back","FRONT","BACK","BLEND","blendColor","blendEquationSeparate","rgb","alpha","RGB","ALPHA","glRGB","glALPHA","blendEquation","equationName","equation","blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","SRCRGB","DSTRGB","SRCALPHA","DSTALPHA","glSrcRGB","glDstRGB","glSrcAlpha","glDstAlpha","blendFunc","srcFuncName","dstFuncName","src","dst","SCISSOR_TEST","rect","POLYGON_OFFSET_FILL","factor","units","alphaToCoverage","invert","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_COVERAGE","DITHER","getState","cullFaceEnabled","getParameter","cullFaceMode","CULL_FACE_MODE","depthTestEnabled","depthClearValue","DEPTH_CLEAR_VALUE","DEPTH_FUNC","depthWritemask","DEPTH_WRITEMASK","DEPTH_RANGE","depthBits","DEPTH_BITS","stencilTestEnabled","stencilClearValue","STENCIL_CLEAR_VALUE","stencilRef","STENCIL_REF","stencilFunc","STENCIL_FUNC","stencilFail","STENCIL_FAIL","stencilPassDepthFail","STENCIL_PASS_DEPTH_FAIL","stencilPassDepthPass","STENCIL_PASS_DEPTH_PASS","stencilValueMask","STENCIL_VALUE_MASK","stencilWritemask","STENCIL_WRITEMASK","stencilBackRef","STENCIL_BACK_REF","stencilBackFunc","STENCIL_BACK_FUNC","stencilBackFail","STENCIL_BACK_FAIL","stencilBackPassDepthFail","STENCIL_BACK_PASS_DEPTH_FAIL","stencilBackPassDepthPass","STENCIL_BACK_PASS_DEPTH_PASS","stencilBackValueMask","STENCIL_BACK_VALUE_MASK","stencilBackWritemask","STENCIL_BACK_WRITEMASK","stencilBits","STENCIL_BITS","blendEnable","BLEND_COLOR","blendDstRGB","BLEND_DST_RGB","blendDstAlpha","BLEND_DST_ALPHA","blendSrcRGB","BLEND_SRC_RGB","blendSrcAlpha","BLEND_SRC_ALPHA","blendEquationRGB","BLEND_EQUATION_RGB","blendEquationAlpha","BLEND_EQUATION_ALPHA","currentViewport","VIEWPORT","maxViewportDims","MAX_VIEWPORT_DIMS","scissorTestEnable","scissorBox","SCISSOR_BOX","polygonOffsetFillEnable","polygonOffsetFactor","POLYGON_OFFSET_FACTOR","polygonOffsetUnits","POLYGON_OFFSET_UNITS","ditherEnable","redBits","RED_BITS","greenBits","GREEN_BITS","blueBits","BLUE_BITS","alphaBits","ALPHA_BITS","subpixelBits","SUBPIXEL_BITS","aliasedLineWidthRange","ALIASED_LINE_WIDTH_RANGE","aliasedPointSizeRange","ALIASED_POINT_SIZE_RANGE","colorWritemask","COLOR_WRITEMASK","colorClearValue","COLOR_CLEAR_VALUE","activeTexture","ACTIVE_TEXTURE","maxTextureImageUnits","MAX_TEXTURE_IMAGE_UNITS","maxCombinedTextureImageUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubeMapTextureSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxRenderbuffereSize","MAX_RENDERBUFFER_SIZE","maxVertexAttribs","MAX_VERTEX_ATTRIBS","maxVertexTextureImageUnits","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxVertexUniformVectors","MAX_VERTEX_UNIFORM_VECTORS","maxVaryingVectors","MAX_VARYING_VECTORS","packAlignment","PACK_ALIGNMENT","unpackAlignment","UNPACK_ALIGNMENT","unpackColorspaceConversionWebgl","UNPACK_COLORSPACE_CONVERSION_WEBGL","unpackFlipYWebgl","UNPACK_FLIP_Y_WEBGL","unpackPremultiplyAlphaWebgl","UNPACK_PREMULTIPLY_ALPHA_WEBGL","vendor","VENDOR","version","VERSION","compressedTextureFormats","COMPRESSED_TEXTURE_FORMATS","currentProgram","CURRENT_PROGRAM","arrayBufferBinding","ARRAY_BUFFER_BINDING","elementArrayBufferBinding","ELEMENT_ARRAY_BUFFER_BINDING","framebufferBinding","FRAMEBUFFER_BINDING","renderbufferBinding","RENDERBUFFER_BINDING","textureBinding2D","TEXTURE_BINDING_2D","textureBindingCubeMap","TEXTURE_BINDING_CUBE_MAP","renderer","RENDERER","samples","SAMPLES","sampleBuffers","SAMPLE_BUFFERS","sampleAlphaToCoverage","sampleCoverageInvert","SAMPLE_COVERAGE_INVERT","sampleConverageValue","SAMPLE_COVERAGE_VALUE","frontFaceOrder","FRONT_FACE","lineWidth","LINE_WIDTH","generateMipmapHint","GENERATE_MIPMAP_HINT","shadingLanguageVersion","SHADING_LANGUAGE_VERSION","depth","stencil","Number","binding","TEXTURE_BINDING_CUBE","color","aliasedRange","texture","from","map","format","vertex","sample","unpack","clear","options","fb","bindFramebuffer","FRAMEBUFFER","mask","clearColor","COLOR_BUFFER_BIT","clearDepth","DEPTH_BUFFER_BIT","clearStencil","STENCIL_BUFFER_BIT","draw","attributes","vao","vs","vsSource","fs","fsSource","attributeLocations","count","length","primitiveType","TRIANGLES","uniforms","key","program","vertexShaderSource","fragmentShaderSource","createShader","VERTEX_SHADER","shaderSource","compileShader","FRAGMENT_SHADER","createProgram","attachShader","deleteShader","attributeName","hasOwnProperty","call","location","bindAttribLocation","linkProgram","log","getProgramParameter","LINK_STATUS","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","error","getProgramInfoLog","useProgram","numberOfAttributes","ACTIVE_ATTRIBUTES","extVAO","bindVertexArrayOES","WebGL2RenderingContext","bindVertexArray","i","getActiveAttrib","attribute","attribLocation","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","numberOfUniforms","ACTIVE_UNIFORMS","maximumTextureUnits","currentTextureUnit","activeUniform","getActiveUniform","uniformName","isUniformArray","indexOfBracket","indexOf","slice","uniform","uniformLocation","getUniformLocation","typeOfUniform","textureUnit","TEXTURE0","WebGLTexture","SAMPLER_2D","bindTexture","TEXTURE_2D","SAMPLER_CUBE","TEXTURE_CUBE_MAP","uniform1i","item","order","Math","floor","sqrt","transpose","uniform1f","createTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","texImage2D","RGBA","image","Image","addEventListener","hasBoundElementArrayBuffer","drawElements","drawArrays","internalFormat","data","generateMipmap","wrapS","wrapT","minFilter","magFilter","levels","DEPTH_COMPONENT","DEPTH_STENCIL","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","numberOfLevels","level","levelData","HTMLImageElement","HTMLCanvasElement","HTMLVideoElement","border","updateTexture","videoElem","arrayBufferView","createCubeMap","faces","target","TEXTURE_CUBE_MAP_POSITIVE_X","px","TEXTURE_CUBE_MAP_NEGATIVE_X","nx","TEXTURE_CUBE_MAP_POSITIVE_Y","py","TEXTURE_CUBE_MAP_NEGATIVE_Y","ny","TEXTURE_CUBE_MAP_POSITIVE_Z","pz","TEXTURE_CUBE_MAP_NEGATIVE_Z","nz","bufferView","createVAO","ext","WebGLRenderingContext","createVertexArrayOES","createVertexArray","normalized","stride","offset","indicesBuffer","createFramebuffer","colorTexture","depthTexture","depthRenderbuffer","colorAttachments","colorAttachmentsLength","drawBuffers","push","COLOR_ATTACHMENT0_WEBGL","drawBuffersWEBGL","colorAttachment","framebufferTexture2D","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","renderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE"],"mappings":"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"}